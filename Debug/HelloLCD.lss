
HelloLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dd4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  00002dd4  00002e48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001fe0  00000000  00000000  00002e90  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c66  00000000  00000000  00004e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00005dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00007e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00009e90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000a2d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ab60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9e 10 	call	0x213c	; 0x213c <main>
      7a:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	af e7       	ldi	r26, 0x7F	; 127
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8f e7       	ldi	r24, 0x7F	; 127
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6f e7       	ldi	r22, 0x7F	; 127
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_voidSetPinDirection>:




void DIO_voidSetPinDirection    (u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8Direction )
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	29 97       	sbiw	r28, 0x09	; 9
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	6a 83       	std	Y+2, r22	; 0x02
     ca6:	4b 83       	std	Y+3, r20	; 0x03

    switch(Copy_u8Direction)
     ca8:	8b 81       	ldd	r24, Y+3	; 0x03
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	39 87       	std	Y+9, r19	; 0x09
     cb0:	28 87       	std	Y+8, r18	; 0x08
     cb2:	88 85       	ldd	r24, Y+8	; 0x08
     cb4:	99 85       	ldd	r25, Y+9	; 0x09
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	09 f4       	brne	.+2      	; 0xcbc <DIO_voidSetPinDirection+0x2e>
     cba:	75 c0       	rjmp	.+234    	; 0xda6 <DIO_voidSetPinDirection+0x118>
     cbc:	28 85       	ldd	r18, Y+8	; 0x08
     cbe:	39 85       	ldd	r19, Y+9	; 0x09
     cc0:	21 30       	cpi	r18, 0x01	; 1
     cc2:	31 05       	cpc	r19, r1
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <DIO_voidSetPinDirection+0x3a>
     cc6:	e2 c0       	rjmp	.+452    	; 0xe8c <DIO_voidSetPinDirection+0x1fe>
    
    {
        case DIO_OUTPUT :
            switch(Copy_u8PortId)
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	3f 83       	std	Y+7, r19	; 0x07
     cd0:	2e 83       	std	Y+6, r18	; 0x06
     cd2:	8e 81       	ldd	r24, Y+6	; 0x06
     cd4:	9f 81       	ldd	r25, Y+7	; 0x07
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	91 05       	cpc	r25, r1
     cda:	49 f1       	breq	.+82     	; 0xd2e <DIO_voidSetPinDirection+0xa0>
     cdc:	2e 81       	ldd	r18, Y+6	; 0x06
     cde:	3f 81       	ldd	r19, Y+7	; 0x07
     ce0:	22 30       	cpi	r18, 0x02	; 2
     ce2:	31 05       	cpc	r19, r1
     ce4:	2c f4       	brge	.+10     	; 0xcf0 <DIO_voidSetPinDirection+0x62>
     ce6:	8e 81       	ldd	r24, Y+6	; 0x06
     ce8:	9f 81       	ldd	r25, Y+7	; 0x07
     cea:	00 97       	sbiw	r24, 0x00	; 0
     cec:	61 f0       	breq	.+24     	; 0xd06 <DIO_voidSetPinDirection+0x78>
     cee:	ce c0       	rjmp	.+412    	; 0xe8c <DIO_voidSetPinDirection+0x1fe>
     cf0:	2e 81       	ldd	r18, Y+6	; 0x06
     cf2:	3f 81       	ldd	r19, Y+7	; 0x07
     cf4:	22 30       	cpi	r18, 0x02	; 2
     cf6:	31 05       	cpc	r19, r1
     cf8:	71 f1       	breq	.+92     	; 0xd56 <DIO_voidSetPinDirection+0xc8>
     cfa:	8e 81       	ldd	r24, Y+6	; 0x06
     cfc:	9f 81       	ldd	r25, Y+7	; 0x07
     cfe:	83 30       	cpi	r24, 0x03	; 3
     d00:	91 05       	cpc	r25, r1
     d02:	e9 f1       	breq	.+122    	; 0xd7e <DIO_voidSetPinDirection+0xf0>
     d04:	c3 c0       	rjmp	.+390    	; 0xe8c <DIO_voidSetPinDirection+0x1fe>
            {
                case DIO_PORTA :
                                SET_BIT(DDRA_REG , Copy_u8PinId);
     d06:	aa e3       	ldi	r26, 0x3A	; 58
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	ea e3       	ldi	r30, 0x3A	; 58
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	48 2f       	mov	r20, r24
     d12:	8a 81       	ldd	r24, Y+2	; 0x02
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	02 2e       	mov	r0, r18
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <DIO_voidSetPinDirection+0x96>
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	0a 94       	dec	r0
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <DIO_voidSetPinDirection+0x92>
     d28:	84 2b       	or	r24, r20
     d2a:	8c 93       	st	X, r24
     d2c:	af c0       	rjmp	.+350    	; 0xe8c <DIO_voidSetPinDirection+0x1fe>
                break ; 
                case DIO_PORTB :
                                SET_BIT(DDRB_REG , Copy_u8PinId);
     d2e:	a7 e3       	ldi	r26, 0x37	; 55
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e7 e3       	ldi	r30, 0x37	; 55
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	48 2f       	mov	r20, r24
     d3a:	8a 81       	ldd	r24, Y+2	; 0x02
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	02 2e       	mov	r0, r18
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <DIO_voidSetPinDirection+0xbe>
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	0a 94       	dec	r0
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <DIO_voidSetPinDirection+0xba>
     d50:	84 2b       	or	r24, r20
     d52:	8c 93       	st	X, r24
     d54:	9b c0       	rjmp	.+310    	; 0xe8c <DIO_voidSetPinDirection+0x1fe>
                break;
                case DIO_PORTC :
                                SET_BIT(DDRC_REG , Copy_u8PinId);
     d56:	a4 e3       	ldi	r26, 0x34	; 52
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e4 e3       	ldi	r30, 0x34	; 52
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	48 2f       	mov	r20, r24
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 2e       	mov	r0, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <DIO_voidSetPinDirection+0xe6>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <DIO_voidSetPinDirection+0xe2>
     d78:	84 2b       	or	r24, r20
     d7a:	8c 93       	st	X, r24
     d7c:	87 c0       	rjmp	.+270    	; 0xe8c <DIO_voidSetPinDirection+0x1fe>
                break ; 
                case DIO_PORTD :
                                SET_BIT(DDRD_REG , Copy_u8PinId);
     d7e:	a1 e3       	ldi	r26, 0x31	; 49
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e1 e3       	ldi	r30, 0x31	; 49
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	48 2f       	mov	r20, r24
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	02 2e       	mov	r0, r18
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <DIO_voidSetPinDirection+0x10e>
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	0a 94       	dec	r0
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <DIO_voidSetPinDirection+0x10a>
     da0:	84 2b       	or	r24, r20
     da2:	8c 93       	st	X, r24
     da4:	73 c0       	rjmp	.+230    	; 0xe8c <DIO_voidSetPinDirection+0x1fe>
                break;
            }
        break;        
        case DIO_INPUT :
        switch(Copy_u8PortId)
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	3d 83       	std	Y+5, r19	; 0x05
     dae:	2c 83       	std	Y+4, r18	; 0x04
     db0:	8c 81       	ldd	r24, Y+4	; 0x04
     db2:	9d 81       	ldd	r25, Y+5	; 0x05
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	91 05       	cpc	r25, r1
     db8:	59 f1       	breq	.+86     	; 0xe10 <DIO_voidSetPinDirection+0x182>
     dba:	2c 81       	ldd	r18, Y+4	; 0x04
     dbc:	3d 81       	ldd	r19, Y+5	; 0x05
     dbe:	22 30       	cpi	r18, 0x02	; 2
     dc0:	31 05       	cpc	r19, r1
     dc2:	2c f4       	brge	.+10     	; 0xdce <DIO_voidSetPinDirection+0x140>
     dc4:	8c 81       	ldd	r24, Y+4	; 0x04
     dc6:	9d 81       	ldd	r25, Y+5	; 0x05
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	69 f0       	breq	.+26     	; 0xde6 <DIO_voidSetPinDirection+0x158>
     dcc:	5f c0       	rjmp	.+190    	; 0xe8c <DIO_voidSetPinDirection+0x1fe>
     dce:	2c 81       	ldd	r18, Y+4	; 0x04
     dd0:	3d 81       	ldd	r19, Y+5	; 0x05
     dd2:	22 30       	cpi	r18, 0x02	; 2
     dd4:	31 05       	cpc	r19, r1
     dd6:	89 f1       	breq	.+98     	; 0xe3a <DIO_voidSetPinDirection+0x1ac>
     dd8:	8c 81       	ldd	r24, Y+4	; 0x04
     dda:	9d 81       	ldd	r25, Y+5	; 0x05
     ddc:	83 30       	cpi	r24, 0x03	; 3
     dde:	91 05       	cpc	r25, r1
     de0:	09 f4       	brne	.+2      	; 0xde4 <DIO_voidSetPinDirection+0x156>
     de2:	40 c0       	rjmp	.+128    	; 0xe64 <DIO_voidSetPinDirection+0x1d6>
     de4:	53 c0       	rjmp	.+166    	; 0xe8c <DIO_voidSetPinDirection+0x1fe>
            {
                case DIO_PORTA :
                                CLR_BIT(DDRA_REG , Copy_u8PinId);
     de6:	aa e3       	ldi	r26, 0x3A	; 58
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	ea e3       	ldi	r30, 0x3A	; 58
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_voidSetPinDirection+0x176>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_voidSetPinDirection+0x172>
     e08:	80 95       	com	r24
     e0a:	84 23       	and	r24, r20
     e0c:	8c 93       	st	X, r24
     e0e:	3e c0       	rjmp	.+124    	; 0xe8c <DIO_voidSetPinDirection+0x1fe>
                break ; 
                case DIO_PORTB :
                                CLR_BIT(DDRB_REG , Copy_u8PinId);
     e10:	a7 e3       	ldi	r26, 0x37	; 55
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	e7 e3       	ldi	r30, 0x37	; 55
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	48 2f       	mov	r20, r24
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	28 2f       	mov	r18, r24
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	02 2e       	mov	r0, r18
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <DIO_voidSetPinDirection+0x1a0>
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	0a 94       	dec	r0
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <DIO_voidSetPinDirection+0x19c>
     e32:	80 95       	com	r24
     e34:	84 23       	and	r24, r20
     e36:	8c 93       	st	X, r24
     e38:	29 c0       	rjmp	.+82     	; 0xe8c <DIO_voidSetPinDirection+0x1fe>
                break;
                case DIO_PORTC :
                                CLR_BIT(DDRC_REG , Copy_u8PinId);
     e3a:	a4 e3       	ldi	r26, 0x34	; 52
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e4 e3       	ldi	r30, 0x34	; 52
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <DIO_voidSetPinDirection+0x1ca>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <DIO_voidSetPinDirection+0x1c6>
     e5c:	80 95       	com	r24
     e5e:	84 23       	and	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <DIO_voidSetPinDirection+0x1fe>
                break ; 
                case DIO_PORTD :
                                CLR_BIT(DDRD_REG , Copy_u8PinId);
     e64:	a1 e3       	ldi	r26, 0x31	; 49
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e1 e3       	ldi	r30, 0x31	; 49
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_voidSetPinDirection+0x1f4>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_voidSetPinDirection+0x1f0>
     e86:	80 95       	com	r24
     e88:	84 23       	and	r24, r20
     e8a:	8c 93       	st	X, r24
                break;
            }
        break ; 
    }
}
     e8c:	29 96       	adiw	r28, 0x09	; 9
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <DIO_voidSetPinValue>:

void DIO_voidSetPinValue    (u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8Value )
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	29 97       	sbiw	r28, 0x09	; 9
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	de bf       	out	0x3e, r29	; 62
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	cd bf       	out	0x3d, r28	; 61
     eb2:	89 83       	std	Y+1, r24	; 0x01
     eb4:	6a 83       	std	Y+2, r22	; 0x02
     eb6:	4b 83       	std	Y+3, r20	; 0x03


    switch(Copy_u8Value)
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	39 87       	std	Y+9, r19	; 0x09
     ec0:	28 87       	std	Y+8, r18	; 0x08
     ec2:	88 85       	ldd	r24, Y+8	; 0x08
     ec4:	99 85       	ldd	r25, Y+9	; 0x09
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	09 f4       	brne	.+2      	; 0xecc <DIO_voidSetPinValue+0x2e>
     eca:	75 c0       	rjmp	.+234    	; 0xfb6 <DIO_voidSetPinValue+0x118>
     ecc:	28 85       	ldd	r18, Y+8	; 0x08
     ece:	39 85       	ldd	r19, Y+9	; 0x09
     ed0:	21 30       	cpi	r18, 0x01	; 1
     ed2:	31 05       	cpc	r19, r1
     ed4:	09 f0       	breq	.+2      	; 0xed8 <DIO_voidSetPinValue+0x3a>
     ed6:	e2 c0       	rjmp	.+452    	; 0x109c <DIO_voidSetPinValue+0x1fe>
    
    {
        case DIO_HIGH :
            switch(Copy_u8PortId)
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	3f 83       	std	Y+7, r19	; 0x07
     ee0:	2e 83       	std	Y+6, r18	; 0x06
     ee2:	8e 81       	ldd	r24, Y+6	; 0x06
     ee4:	9f 81       	ldd	r25, Y+7	; 0x07
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	91 05       	cpc	r25, r1
     eea:	49 f1       	breq	.+82     	; 0xf3e <DIO_voidSetPinValue+0xa0>
     eec:	2e 81       	ldd	r18, Y+6	; 0x06
     eee:	3f 81       	ldd	r19, Y+7	; 0x07
     ef0:	22 30       	cpi	r18, 0x02	; 2
     ef2:	31 05       	cpc	r19, r1
     ef4:	2c f4       	brge	.+10     	; 0xf00 <DIO_voidSetPinValue+0x62>
     ef6:	8e 81       	ldd	r24, Y+6	; 0x06
     ef8:	9f 81       	ldd	r25, Y+7	; 0x07
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	61 f0       	breq	.+24     	; 0xf16 <DIO_voidSetPinValue+0x78>
     efe:	ce c0       	rjmp	.+412    	; 0x109c <DIO_voidSetPinValue+0x1fe>
     f00:	2e 81       	ldd	r18, Y+6	; 0x06
     f02:	3f 81       	ldd	r19, Y+7	; 0x07
     f04:	22 30       	cpi	r18, 0x02	; 2
     f06:	31 05       	cpc	r19, r1
     f08:	71 f1       	breq	.+92     	; 0xf66 <DIO_voidSetPinValue+0xc8>
     f0a:	8e 81       	ldd	r24, Y+6	; 0x06
     f0c:	9f 81       	ldd	r25, Y+7	; 0x07
     f0e:	83 30       	cpi	r24, 0x03	; 3
     f10:	91 05       	cpc	r25, r1
     f12:	e9 f1       	breq	.+122    	; 0xf8e <DIO_voidSetPinValue+0xf0>
     f14:	c3 c0       	rjmp	.+390    	; 0x109c <DIO_voidSetPinValue+0x1fe>
            {
                case DIO_PORTA :
                                SET_BIT(PORTA_REG , Copy_u8PinId);
     f16:	ab e3       	ldi	r26, 0x3B	; 59
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	eb e3       	ldi	r30, 0x3B	; 59
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_voidSetPinValue+0x96>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_voidSetPinValue+0x92>
     f38:	84 2b       	or	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	af c0       	rjmp	.+350    	; 0x109c <DIO_voidSetPinValue+0x1fe>
                break ; 
                case DIO_PORTB :
                                SET_BIT(PORTB_REG , Copy_u8PinId);
     f3e:	a8 e3       	ldi	r26, 0x38	; 56
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e8 e3       	ldi	r30, 0x38	; 56
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <DIO_voidSetPinValue+0xbe>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <DIO_voidSetPinValue+0xba>
     f60:	84 2b       	or	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	9b c0       	rjmp	.+310    	; 0x109c <DIO_voidSetPinValue+0x1fe>
                break;
                case DIO_PORTC :
                                SET_BIT(PORTC_REG , Copy_u8PinId);
     f66:	a5 e3       	ldi	r26, 0x35	; 53
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e5 e3       	ldi	r30, 0x35	; 53
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 2e       	mov	r0, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <DIO_voidSetPinValue+0xe6>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	0a 94       	dec	r0
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <DIO_voidSetPinValue+0xe2>
     f88:	84 2b       	or	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	87 c0       	rjmp	.+270    	; 0x109c <DIO_voidSetPinValue+0x1fe>
                break ; 
                case DIO_PORTD :
                                SET_BIT(PORTD_REG , Copy_u8PinId);
     f8e:	a2 e3       	ldi	r26, 0x32	; 50
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e2 e3       	ldi	r30, 0x32	; 50
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <DIO_voidSetPinValue+0x10e>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <DIO_voidSetPinValue+0x10a>
     fb0:	84 2b       	or	r24, r20
     fb2:	8c 93       	st	X, r24
     fb4:	73 c0       	rjmp	.+230    	; 0x109c <DIO_voidSetPinValue+0x1fe>
                break;
            }
        break;        
        case DIO_LOW :
        switch(Copy_u8PortId)
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	3d 83       	std	Y+5, r19	; 0x05
     fbe:	2c 83       	std	Y+4, r18	; 0x04
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	9d 81       	ldd	r25, Y+5	; 0x05
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	91 05       	cpc	r25, r1
     fc8:	59 f1       	breq	.+86     	; 0x1020 <DIO_voidSetPinValue+0x182>
     fca:	2c 81       	ldd	r18, Y+4	; 0x04
     fcc:	3d 81       	ldd	r19, Y+5	; 0x05
     fce:	22 30       	cpi	r18, 0x02	; 2
     fd0:	31 05       	cpc	r19, r1
     fd2:	2c f4       	brge	.+10     	; 0xfde <DIO_voidSetPinValue+0x140>
     fd4:	8c 81       	ldd	r24, Y+4	; 0x04
     fd6:	9d 81       	ldd	r25, Y+5	; 0x05
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	69 f0       	breq	.+26     	; 0xff6 <DIO_voidSetPinValue+0x158>
     fdc:	5f c0       	rjmp	.+190    	; 0x109c <DIO_voidSetPinValue+0x1fe>
     fde:	2c 81       	ldd	r18, Y+4	; 0x04
     fe0:	3d 81       	ldd	r19, Y+5	; 0x05
     fe2:	22 30       	cpi	r18, 0x02	; 2
     fe4:	31 05       	cpc	r19, r1
     fe6:	89 f1       	breq	.+98     	; 0x104a <DIO_voidSetPinValue+0x1ac>
     fe8:	8c 81       	ldd	r24, Y+4	; 0x04
     fea:	9d 81       	ldd	r25, Y+5	; 0x05
     fec:	83 30       	cpi	r24, 0x03	; 3
     fee:	91 05       	cpc	r25, r1
     ff0:	09 f4       	brne	.+2      	; 0xff4 <DIO_voidSetPinValue+0x156>
     ff2:	40 c0       	rjmp	.+128    	; 0x1074 <DIO_voidSetPinValue+0x1d6>
     ff4:	53 c0       	rjmp	.+166    	; 0x109c <DIO_voidSetPinValue+0x1fe>
            {
                case DIO_PORTA :
                                CLR_BIT(PORTA_REG , Copy_u8PinId);
     ff6:	ab e3       	ldi	r26, 0x3B	; 59
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	eb e3       	ldi	r30, 0x3B	; 59
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_voidSetPinValue+0x176>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_voidSetPinValue+0x172>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	3e c0       	rjmp	.+124    	; 0x109c <DIO_voidSetPinValue+0x1fe>
                break ; 
                case DIO_PORTB :
                                CLR_BIT(PORTB_REG , Copy_u8PinId);
    1020:	a8 e3       	ldi	r26, 0x38	; 56
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e8 e3       	ldi	r30, 0x38	; 56
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_voidSetPinValue+0x1a0>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <DIO_voidSetPinValue+0x19c>
    1042:	80 95       	com	r24
    1044:	84 23       	and	r24, r20
    1046:	8c 93       	st	X, r24
    1048:	29 c0       	rjmp	.+82     	; 0x109c <DIO_voidSetPinValue+0x1fe>
                break;
                case DIO_PORTC :
                                CLR_BIT(PORTC_REG , Copy_u8PinId);
    104a:	a5 e3       	ldi	r26, 0x35	; 53
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e5 e3       	ldi	r30, 0x35	; 53
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_voidSetPinValue+0x1ca>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_voidSetPinValue+0x1c6>
    106c:	80 95       	com	r24
    106e:	84 23       	and	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	14 c0       	rjmp	.+40     	; 0x109c <DIO_voidSetPinValue+0x1fe>
                break ; 
                case DIO_PORTD :
                                CLR_BIT(PORTD_REG , Copy_u8PinId);
    1074:	a2 e3       	ldi	r26, 0x32	; 50
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e2 e3       	ldi	r30, 0x32	; 50
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_voidSetPinValue+0x1f4>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_voidSetPinValue+0x1f0>
    1096:	80 95       	com	r24
    1098:	84 23       	and	r24, r20
    109a:	8c 93       	st	X, r24
                break;
            }
        break ; 
    }

}
    109c:	29 96       	adiw	r28, 0x09	; 9
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue        (u8 Copy_u8PortId , u8 Copy_u8PinId )
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <DIO_u8GetPinValue+0x6>
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <DIO_u8GetPinValue+0x8>
    10b6:	0f 92       	push	r0
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	8a 83       	std	Y+2, r24	; 0x02
    10be:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8ReturnedValue = 255 ; 
    10c0:	8f ef       	ldi	r24, 0xFF	; 255
    10c2:	89 83       	std	Y+1, r24	; 0x01

    switch(Copy_u8PortId)
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	3d 83       	std	Y+5, r19	; 0x05
    10cc:	2c 83       	std	Y+4, r18	; 0x04
    10ce:	4c 81       	ldd	r20, Y+4	; 0x04
    10d0:	5d 81       	ldd	r21, Y+5	; 0x05
    10d2:	41 30       	cpi	r20, 0x01	; 1
    10d4:	51 05       	cpc	r21, r1
    10d6:	41 f1       	breq	.+80     	; 0x1128 <DIO_u8GetPinValue+0x7a>
    10d8:	8c 81       	ldd	r24, Y+4	; 0x04
    10da:	9d 81       	ldd	r25, Y+5	; 0x05
    10dc:	82 30       	cpi	r24, 0x02	; 2
    10de:	91 05       	cpc	r25, r1
    10e0:	34 f4       	brge	.+12     	; 0x10ee <DIO_u8GetPinValue+0x40>
    10e2:	2c 81       	ldd	r18, Y+4	; 0x04
    10e4:	3d 81       	ldd	r19, Y+5	; 0x05
    10e6:	21 15       	cp	r18, r1
    10e8:	31 05       	cpc	r19, r1
    10ea:	61 f0       	breq	.+24     	; 0x1104 <DIO_u8GetPinValue+0x56>
    10ec:	52 c0       	rjmp	.+164    	; 0x1192 <DIO_u8GetPinValue+0xe4>
    10ee:	4c 81       	ldd	r20, Y+4	; 0x04
    10f0:	5d 81       	ldd	r21, Y+5	; 0x05
    10f2:	42 30       	cpi	r20, 0x02	; 2
    10f4:	51 05       	cpc	r21, r1
    10f6:	51 f1       	breq	.+84     	; 0x114c <DIO_u8GetPinValue+0x9e>
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	9d 81       	ldd	r25, Y+5	; 0x05
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	b9 f1       	breq	.+110    	; 0x1170 <DIO_u8GetPinValue+0xc2>
    1102:	47 c0       	rjmp	.+142    	; 0x1192 <DIO_u8GetPinValue+0xe4>
    {
        case DIO_PORTA :
            Local_u8ReturnedValue = GET_BIT(PINA_REG , Copy_u8PinId);
    1104:	e9 e3       	ldi	r30, 0x39	; 57
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	88 2f       	mov	r24, r24
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	a9 01       	movw	r20, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_u8GetPinValue+0x6e>
    1118:	55 95       	asr	r21
    111a:	47 95       	ror	r20
    111c:	8a 95       	dec	r24
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <DIO_u8GetPinValue+0x6a>
    1120:	ca 01       	movw	r24, r20
    1122:	81 70       	andi	r24, 0x01	; 1
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	35 c0       	rjmp	.+106    	; 0x1192 <DIO_u8GetPinValue+0xe4>
        break ;
        case DIO_PORTB :
            Local_u8ReturnedValue = GET_BIT(PINB_REG , Copy_u8PinId);
    1128:	e6 e3       	ldi	r30, 0x36	; 54
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	88 2f       	mov	r24, r24
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	a9 01       	movw	r20, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <DIO_u8GetPinValue+0x92>
    113c:	55 95       	asr	r21
    113e:	47 95       	ror	r20
    1140:	8a 95       	dec	r24
    1142:	e2 f7       	brpl	.-8      	; 0x113c <DIO_u8GetPinValue+0x8e>
    1144:	ca 01       	movw	r24, r20
    1146:	81 70       	andi	r24, 0x01	; 1
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	23 c0       	rjmp	.+70     	; 0x1192 <DIO_u8GetPinValue+0xe4>
        break ;
        case DIO_PORTC :
            Local_u8ReturnedValue = GET_BIT(PINC_REG , Copy_u8PinId);
    114c:	e3 e3       	ldi	r30, 0x33	; 51
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	88 2f       	mov	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	a9 01       	movw	r20, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <DIO_u8GetPinValue+0xb6>
    1160:	55 95       	asr	r21
    1162:	47 95       	ror	r20
    1164:	8a 95       	dec	r24
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <DIO_u8GetPinValue+0xb2>
    1168:	ca 01       	movw	r24, r20
    116a:	81 70       	andi	r24, 0x01	; 1
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	11 c0       	rjmp	.+34     	; 0x1192 <DIO_u8GetPinValue+0xe4>
        break ; 
        case DIO_PORTD : 
            Local_u8ReturnedValue = GET_BIT(PIND_REG , Copy_u8PinId);
    1170:	e0 e3       	ldi	r30, 0x30	; 48
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	88 2f       	mov	r24, r24
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a9 01       	movw	r20, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_u8GetPinValue+0xda>
    1184:	55 95       	asr	r21
    1186:	47 95       	ror	r20
    1188:	8a 95       	dec	r24
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_u8GetPinValue+0xd6>
    118c:	ca 01       	movw	r24, r20
    118e:	81 70       	andi	r24, 0x01	; 1
    1190:	89 83       	std	Y+1, r24	; 0x01
        break ;
    }



    return Local_u8ReturnedValue ; 
    1192:	89 81       	ldd	r24, Y+1	; 0x01
}
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(u8 Copy_u8PortId, u8 Copy_u8Value)
{
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <DIO_voidSetPortValue+0x6>
    11aa:	00 d0       	rcall	.+0      	; 0x11ac <DIO_voidSetPortValue+0x8>
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	89 83       	std	Y+1, r24	; 0x01
    11b2:	6a 83       	std	Y+2, r22	; 0x02
    switch(Copy_u8PortId)
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	3c 83       	std	Y+4, r19	; 0x04
    11bc:	2b 83       	std	Y+3, r18	; 0x03
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	9c 81       	ldd	r25, Y+4	; 0x04
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	91 05       	cpc	r25, r1
    11c6:	d1 f0       	breq	.+52     	; 0x11fc <DIO_voidSetPortValue+0x58>
    11c8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ca:	3c 81       	ldd	r19, Y+4	; 0x04
    11cc:	22 30       	cpi	r18, 0x02	; 2
    11ce:	31 05       	cpc	r19, r1
    11d0:	2c f4       	brge	.+10     	; 0x11dc <DIO_voidSetPortValue+0x38>
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	61 f0       	breq	.+24     	; 0x11f2 <DIO_voidSetPortValue+0x4e>
    11da:	1e c0       	rjmp	.+60     	; 0x1218 <DIO_voidSetPortValue+0x74>
    11dc:	2b 81       	ldd	r18, Y+3	; 0x03
    11de:	3c 81       	ldd	r19, Y+4	; 0x04
    11e0:	22 30       	cpi	r18, 0x02	; 2
    11e2:	31 05       	cpc	r19, r1
    11e4:	81 f0       	breq	.+32     	; 0x1206 <DIO_voidSetPortValue+0x62>
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ea:	83 30       	cpi	r24, 0x03	; 3
    11ec:	91 05       	cpc	r25, r1
    11ee:	81 f0       	breq	.+32     	; 0x1210 <DIO_voidSetPortValue+0x6c>
    11f0:	13 c0       	rjmp	.+38     	; 0x1218 <DIO_voidSetPortValue+0x74>
    {
        case DIO_PORTA: PORTA_REG = Copy_u8Value;
    11f2:	eb e3       	ldi	r30, 0x3B	; 59
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	80 83       	st	Z, r24
    11fa:	0e c0       	rjmp	.+28     	; 0x1218 <DIO_voidSetPortValue+0x74>
                    break;

        case DIO_PORTB: PORTB_REG = Copy_u8Value;
    11fc:	e8 e3       	ldi	r30, 0x38	; 56
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	80 83       	st	Z, r24
    1204:	09 c0       	rjmp	.+18     	; 0x1218 <DIO_voidSetPortValue+0x74>
                    break;

        case DIO_PORTC: PORTC_REG = Copy_u8Value;
    1206:	e5 e3       	ldi	r30, 0x35	; 53
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	80 83       	st	Z, r24
    120e:	04 c0       	rjmp	.+8      	; 0x1218 <DIO_voidSetPortValue+0x74>
                    break;

        case DIO_PORTD: PORTD_REG = Copy_u8Value;
    1210:	e2 e3       	ldi	r30, 0x32	; 50
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	80 83       	st	Z, r24
                    break;
        default:
                    break;
    }
}
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	08 95       	ret

00001226 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 Copy_u8PortId, u8 Copy_u8Direction)
{
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	28 97       	sbiw	r28, 0x08	; 8
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	6a 83       	std	Y+2, r22	; 0x02
    switch(Copy_u8Direction)
    123e:	8a 81       	ldd	r24, Y+2	; 0x02
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	38 87       	std	Y+8, r19	; 0x08
    1246:	2f 83       	std	Y+7, r18	; 0x07
    1248:	8f 81       	ldd	r24, Y+7	; 0x07
    124a:	98 85       	ldd	r25, Y+8	; 0x08
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	c9 f1       	breq	.+114    	; 0x12c2 <DIO_voidSetPortDirection+0x9c>
    1250:	2f 81       	ldd	r18, Y+7	; 0x07
    1252:	38 85       	ldd	r19, Y+8	; 0x08
    1254:	21 30       	cpi	r18, 0x01	; 1
    1256:	31 05       	cpc	r19, r1
    1258:	09 f0       	breq	.+2      	; 0x125c <DIO_voidSetPortDirection+0x36>
    125a:	61 c0       	rjmp	.+194    	; 0x131e <DIO_voidSetPortDirection+0xf8>
    {
        case DIO_OUTPUT:
                        switch(Copy_u8PortId)
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	3e 83       	std	Y+6, r19	; 0x06
    1264:	2d 83       	std	Y+5, r18	; 0x05
    1266:	8d 81       	ldd	r24, Y+5	; 0x05
    1268:	9e 81       	ldd	r25, Y+6	; 0x06
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	91 05       	cpc	r25, r1
    126e:	d1 f0       	breq	.+52     	; 0x12a4 <DIO_voidSetPortDirection+0x7e>
    1270:	2d 81       	ldd	r18, Y+5	; 0x05
    1272:	3e 81       	ldd	r19, Y+6	; 0x06
    1274:	22 30       	cpi	r18, 0x02	; 2
    1276:	31 05       	cpc	r19, r1
    1278:	2c f4       	brge	.+10     	; 0x1284 <DIO_voidSetPortDirection+0x5e>
    127a:	8d 81       	ldd	r24, Y+5	; 0x05
    127c:	9e 81       	ldd	r25, Y+6	; 0x06
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	61 f0       	breq	.+24     	; 0x129a <DIO_voidSetPortDirection+0x74>
    1282:	4d c0       	rjmp	.+154    	; 0x131e <DIO_voidSetPortDirection+0xf8>
    1284:	2d 81       	ldd	r18, Y+5	; 0x05
    1286:	3e 81       	ldd	r19, Y+6	; 0x06
    1288:	22 30       	cpi	r18, 0x02	; 2
    128a:	31 05       	cpc	r19, r1
    128c:	81 f0       	breq	.+32     	; 0x12ae <DIO_voidSetPortDirection+0x88>
    128e:	8d 81       	ldd	r24, Y+5	; 0x05
    1290:	9e 81       	ldd	r25, Y+6	; 0x06
    1292:	83 30       	cpi	r24, 0x03	; 3
    1294:	91 05       	cpc	r25, r1
    1296:	81 f0       	breq	.+32     	; 0x12b8 <DIO_voidSetPortDirection+0x92>
    1298:	42 c0       	rjmp	.+132    	; 0x131e <DIO_voidSetPortDirection+0xf8>
                        {
                            case DIO_PORTA: DDRA_REG = 0xFF;
    129a:	ea e3       	ldi	r30, 0x3A	; 58
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	8f ef       	ldi	r24, 0xFF	; 255
    12a0:	80 83       	st	Z, r24
    12a2:	3d c0       	rjmp	.+122    	; 0x131e <DIO_voidSetPortDirection+0xf8>
                                        break;

                            case DIO_PORTB: DDRB_REG = 0xFF;
    12a4:	e7 e3       	ldi	r30, 0x37	; 55
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	8f ef       	ldi	r24, 0xFF	; 255
    12aa:	80 83       	st	Z, r24
    12ac:	38 c0       	rjmp	.+112    	; 0x131e <DIO_voidSetPortDirection+0xf8>
                                        break;

                            case DIO_PORTC: DDRC_REG = 0xFF;
    12ae:	e4 e3       	ldi	r30, 0x34	; 52
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	8f ef       	ldi	r24, 0xFF	; 255
    12b4:	80 83       	st	Z, r24
    12b6:	33 c0       	rjmp	.+102    	; 0x131e <DIO_voidSetPortDirection+0xf8>
                                        break;

                            case DIO_PORTD: DDRD_REG = 0xFF;
    12b8:	e1 e3       	ldi	r30, 0x31	; 49
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	8f ef       	ldi	r24, 0xFF	; 255
    12be:	80 83       	st	Z, r24
    12c0:	2e c0       	rjmp	.+92     	; 0x131e <DIO_voidSetPortDirection+0xf8>
                                        break;
                            default:
                                        break;
                        }
                        break;
        case DIO_INPUT:     switch(Copy_u8PortId)
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	3c 83       	std	Y+4, r19	; 0x04
    12ca:	2b 83       	std	Y+3, r18	; 0x03
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	91 05       	cpc	r25, r1
    12d4:	c9 f0       	breq	.+50     	; 0x1308 <DIO_voidSetPortDirection+0xe2>
    12d6:	2b 81       	ldd	r18, Y+3	; 0x03
    12d8:	3c 81       	ldd	r19, Y+4	; 0x04
    12da:	22 30       	cpi	r18, 0x02	; 2
    12dc:	31 05       	cpc	r19, r1
    12de:	2c f4       	brge	.+10     	; 0x12ea <DIO_voidSetPortDirection+0xc4>
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	9c 81       	ldd	r25, Y+4	; 0x04
    12e4:	00 97       	sbiw	r24, 0x00	; 0
    12e6:	61 f0       	breq	.+24     	; 0x1300 <DIO_voidSetPortDirection+0xda>
    12e8:	1a c0       	rjmp	.+52     	; 0x131e <DIO_voidSetPortDirection+0xf8>
    12ea:	2b 81       	ldd	r18, Y+3	; 0x03
    12ec:	3c 81       	ldd	r19, Y+4	; 0x04
    12ee:	22 30       	cpi	r18, 0x02	; 2
    12f0:	31 05       	cpc	r19, r1
    12f2:	71 f0       	breq	.+28     	; 0x1310 <DIO_voidSetPortDirection+0xea>
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	83 30       	cpi	r24, 0x03	; 3
    12fa:	91 05       	cpc	r25, r1
    12fc:	69 f0       	breq	.+26     	; 0x1318 <DIO_voidSetPortDirection+0xf2>
    12fe:	0f c0       	rjmp	.+30     	; 0x131e <DIO_voidSetPortDirection+0xf8>
                        {
                            case DIO_PORTA: DDRA_REG = 0x00;
    1300:	ea e3       	ldi	r30, 0x3A	; 58
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	10 82       	st	Z, r1
    1306:	0b c0       	rjmp	.+22     	; 0x131e <DIO_voidSetPortDirection+0xf8>
                                        break;

                            case DIO_PORTB: DDRB_REG = 0x00;
    1308:	e7 e3       	ldi	r30, 0x37	; 55
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	10 82       	st	Z, r1
    130e:	07 c0       	rjmp	.+14     	; 0x131e <DIO_voidSetPortDirection+0xf8>
                                        break;

                            case DIO_PORTC: DDRC_REG = 0x00;
    1310:	e4 e3       	ldi	r30, 0x34	; 52
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	10 82       	st	Z, r1
    1316:	03 c0       	rjmp	.+6      	; 0x131e <DIO_voidSetPortDirection+0xf8>
                                        break;

                            case DIO_PORTD: DDRD_REG = 0x00;
    1318:	e1 e3       	ldi	r30, 0x31	; 49
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	10 82       	st	Z, r1
                        }
                        break;
        default:
                        break;
    }
}
    131e:	28 96       	adiw	r28, 0x08	; 8
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <DIO_u8GetPortValue>:

u8   DIO_u8GetPortValue(u8 Copy_u8PortId)
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	00 d0       	rcall	.+0      	; 0x1336 <DIO_u8GetPortValue+0x6>
    1336:	00 d0       	rcall	.+0      	; 0x1338 <DIO_u8GetPortValue+0x8>
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Var;
    switch(Copy_u8PortId)
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	3c 83       	std	Y+4, r19	; 0x04
    1346:	2b 83       	std	Y+3, r18	; 0x03
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	91 05       	cpc	r25, r1
    1350:	d1 f0       	breq	.+52     	; 0x1386 <DIO_u8GetPortValue+0x56>
    1352:	2b 81       	ldd	r18, Y+3	; 0x03
    1354:	3c 81       	ldd	r19, Y+4	; 0x04
    1356:	22 30       	cpi	r18, 0x02	; 2
    1358:	31 05       	cpc	r19, r1
    135a:	2c f4       	brge	.+10     	; 0x1366 <DIO_u8GetPortValue+0x36>
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	9c 81       	ldd	r25, Y+4	; 0x04
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	61 f0       	breq	.+24     	; 0x137c <DIO_u8GetPortValue+0x4c>
    1364:	1e c0       	rjmp	.+60     	; 0x13a2 <DIO_u8GetPortValue+0x72>
    1366:	2b 81       	ldd	r18, Y+3	; 0x03
    1368:	3c 81       	ldd	r19, Y+4	; 0x04
    136a:	22 30       	cpi	r18, 0x02	; 2
    136c:	31 05       	cpc	r19, r1
    136e:	81 f0       	breq	.+32     	; 0x1390 <DIO_u8GetPortValue+0x60>
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	91 05       	cpc	r25, r1
    1378:	81 f0       	breq	.+32     	; 0x139a <DIO_u8GetPortValue+0x6a>
    137a:	13 c0       	rjmp	.+38     	; 0x13a2 <DIO_u8GetPortValue+0x72>
    {
        case DIO_PORTA: Local_u8Var = PINA_REG;
    137c:	e9 e3       	ldi	r30, 0x39	; 57
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	0e c0       	rjmp	.+28     	; 0x13a2 <DIO_u8GetPortValue+0x72>
                    break;

        case DIO_PORTB: Local_u8Var = PINB_REG;
    1386:	e6 e3       	ldi	r30, 0x36	; 54
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	09 c0       	rjmp	.+18     	; 0x13a2 <DIO_u8GetPortValue+0x72>
                    break;

        case DIO_PORTC: Local_u8Var = PINC_REG;
    1390:	e3 e3       	ldi	r30, 0x33	; 51
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	89 83       	std	Y+1, r24	; 0x01
    1398:	04 c0       	rjmp	.+8      	; 0x13a2 <DIO_u8GetPortValue+0x72>
                    break;

        case DIO_PORTD: Local_u8Var = PIND_REG;
    139a:	e0 e3       	ldi	r30, 0x30	; 48
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	89 83       	std	Y+1, r24	; 0x01
                    break;
        default:
                    break;
    }
    return Local_u8Var;
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <LED_voidInit>:
#include "LED_interface.h"



void LED_voidInit		(LED_t * Copy_pstructLed )
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <LED_voidInit+0x6>
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <LED_voidInit+0x8>
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	9a 83       	std	Y+2, r25	; 0x02
    13c0:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinDirection(Copy_pstructLed->Port , Copy_pstructLed->Pin , DIO_OUTPUT);
    13c2:	e9 81       	ldd	r30, Y+1	; 0x01
    13c4:	fa 81       	ldd	r31, Y+2	; 0x02
    13c6:	80 81       	ld	r24, Z
    13c8:	e9 81       	ldd	r30, Y+1	; 0x01
    13ca:	fa 81       	ldd	r31, Y+2	; 0x02
    13cc:	91 81       	ldd	r25, Z+1	; 0x01
    13ce:	69 2f       	mov	r22, r25
    13d0:	41 e0       	ldi	r20, 0x01	; 1
    13d2:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetPinDirection>
	switch(Copy_pstructLed -> ActiveState)
    13d6:	e9 81       	ldd	r30, Y+1	; 0x01
    13d8:	fa 81       	ldd	r31, Y+2	; 0x02
    13da:	82 81       	ldd	r24, Z+2	; 0x02
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	3c 83       	std	Y+4, r19	; 0x04
    13e2:	2b 83       	std	Y+3, r18	; 0x03
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	9c 81       	ldd	r25, Y+4	; 0x04
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	81 f0       	breq	.+32     	; 0x140c <LED_voidInit+0x5a>
    13ec:	2b 81       	ldd	r18, Y+3	; 0x03
    13ee:	3c 81       	ldd	r19, Y+4	; 0x04
    13f0:	21 30       	cpi	r18, 0x01	; 1
    13f2:	31 05       	cpc	r19, r1
    13f4:	a9 f4       	brne	.+42     	; 0x1420 <LED_voidInit+0x6e>
	{
	case LED_ACTIVE_HIGH :
		DIO_voidSetPinValue(Copy_pstructLed->Port , Copy_pstructLed->Pin , DIO_LOW);
    13f6:	e9 81       	ldd	r30, Y+1	; 0x01
    13f8:	fa 81       	ldd	r31, Y+2	; 0x02
    13fa:	80 81       	ld	r24, Z
    13fc:	e9 81       	ldd	r30, Y+1	; 0x01
    13fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1400:	91 81       	ldd	r25, Z+1	; 0x01
    1402:	69 2f       	mov	r22, r25
    1404:	40 e0       	ldi	r20, 0x00	; 0
    1406:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    140a:	0a c0       	rjmp	.+20     	; 0x1420 <LED_voidInit+0x6e>
		break;
	case LED_ACTIVE_LOW :
		DIO_voidSetPinValue(Copy_pstructLed->Port , Copy_pstructLed->Pin , DIO_HIGH);
    140c:	e9 81       	ldd	r30, Y+1	; 0x01
    140e:	fa 81       	ldd	r31, Y+2	; 0x02
    1410:	80 81       	ld	r24, Z
    1412:	e9 81       	ldd	r30, Y+1	; 0x01
    1414:	fa 81       	ldd	r31, Y+2	; 0x02
    1416:	91 81       	ldd	r25, Z+1	; 0x01
    1418:	69 2f       	mov	r22, r25
    141a:	41 e0       	ldi	r20, 0x01	; 1
    141c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
		break;
	default:
		break;
	}
}
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <LED_voidOn>:
void LED_voidOn			(LED_t * Copy_pstructLed )
{
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	00 d0       	rcall	.+0      	; 0x1434 <LED_voidOn+0x6>
    1434:	00 d0       	rcall	.+0      	; 0x1436 <LED_voidOn+0x8>
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	9a 83       	std	Y+2, r25	; 0x02
    143c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_pstructLed -> ActiveState)
    143e:	e9 81       	ldd	r30, Y+1	; 0x01
    1440:	fa 81       	ldd	r31, Y+2	; 0x02
    1442:	82 81       	ldd	r24, Z+2	; 0x02
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	3c 83       	std	Y+4, r19	; 0x04
    144a:	2b 83       	std	Y+3, r18	; 0x03
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	9c 81       	ldd	r25, Y+4	; 0x04
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	81 f0       	breq	.+32     	; 0x1474 <LED_voidOn+0x46>
    1454:	2b 81       	ldd	r18, Y+3	; 0x03
    1456:	3c 81       	ldd	r19, Y+4	; 0x04
    1458:	21 30       	cpi	r18, 0x01	; 1
    145a:	31 05       	cpc	r19, r1
    145c:	a9 f4       	brne	.+42     	; 0x1488 <LED_voidOn+0x5a>
		{
		case LED_ACTIVE_HIGH :
			DIO_voidSetPinValue(Copy_pstructLed->Port , Copy_pstructLed->Pin , DIO_HIGH);
    145e:	e9 81       	ldd	r30, Y+1	; 0x01
    1460:	fa 81       	ldd	r31, Y+2	; 0x02
    1462:	80 81       	ld	r24, Z
    1464:	e9 81       	ldd	r30, Y+1	; 0x01
    1466:	fa 81       	ldd	r31, Y+2	; 0x02
    1468:	91 81       	ldd	r25, Z+1	; 0x01
    146a:	69 2f       	mov	r22, r25
    146c:	41 e0       	ldi	r20, 0x01	; 1
    146e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    1472:	0a c0       	rjmp	.+20     	; 0x1488 <LED_voidOn+0x5a>
			break;
		case LED_ACTIVE_LOW :
			DIO_voidSetPinValue(Copy_pstructLed->Port , Copy_pstructLed->Pin , DIO_LOW);
    1474:	e9 81       	ldd	r30, Y+1	; 0x01
    1476:	fa 81       	ldd	r31, Y+2	; 0x02
    1478:	80 81       	ld	r24, Z
    147a:	e9 81       	ldd	r30, Y+1	; 0x01
    147c:	fa 81       	ldd	r31, Y+2	; 0x02
    147e:	91 81       	ldd	r25, Z+1	; 0x01
    1480:	69 2f       	mov	r22, r25
    1482:	40 e0       	ldi	r20, 0x00	; 0
    1484:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
			break;
		default:
			break;
		}
}
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <LED_voidOff>:
void LED_voidOff		(LED_t * Copy_pstructLed )
{
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	00 d0       	rcall	.+0      	; 0x149c <LED_voidOff+0x6>
    149c:	00 d0       	rcall	.+0      	; 0x149e <LED_voidOff+0x8>
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	9a 83       	std	Y+2, r25	; 0x02
    14a4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_pstructLed -> ActiveState)
    14a6:	e9 81       	ldd	r30, Y+1	; 0x01
    14a8:	fa 81       	ldd	r31, Y+2	; 0x02
    14aa:	82 81       	ldd	r24, Z+2	; 0x02
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	3c 83       	std	Y+4, r19	; 0x04
    14b2:	2b 83       	std	Y+3, r18	; 0x03
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	9c 81       	ldd	r25, Y+4	; 0x04
    14b8:	00 97       	sbiw	r24, 0x00	; 0
    14ba:	81 f0       	breq	.+32     	; 0x14dc <LED_voidOff+0x46>
    14bc:	2b 81       	ldd	r18, Y+3	; 0x03
    14be:	3c 81       	ldd	r19, Y+4	; 0x04
    14c0:	21 30       	cpi	r18, 0x01	; 1
    14c2:	31 05       	cpc	r19, r1
    14c4:	a9 f4       	brne	.+42     	; 0x14f0 <LED_voidOff+0x5a>
		{
		case LED_ACTIVE_HIGH :
			DIO_voidSetPinValue(Copy_pstructLed->Port , Copy_pstructLed->Pin , DIO_LOW);
    14c6:	e9 81       	ldd	r30, Y+1	; 0x01
    14c8:	fa 81       	ldd	r31, Y+2	; 0x02
    14ca:	80 81       	ld	r24, Z
    14cc:	e9 81       	ldd	r30, Y+1	; 0x01
    14ce:	fa 81       	ldd	r31, Y+2	; 0x02
    14d0:	91 81       	ldd	r25, Z+1	; 0x01
    14d2:	69 2f       	mov	r22, r25
    14d4:	40 e0       	ldi	r20, 0x00	; 0
    14d6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    14da:	0a c0       	rjmp	.+20     	; 0x14f0 <LED_voidOff+0x5a>
			break;
		case LED_ACTIVE_LOW :
			DIO_voidSetPinValue(Copy_pstructLed->Port , Copy_pstructLed->Pin , DIO_HIGH);
    14dc:	e9 81       	ldd	r30, Y+1	; 0x01
    14de:	fa 81       	ldd	r31, Y+2	; 0x02
    14e0:	80 81       	ld	r24, Z
    14e2:	e9 81       	ldd	r30, Y+1	; 0x01
    14e4:	fa 81       	ldd	r31, Y+2	; 0x02
    14e6:	91 81       	ldd	r25, Z+1	; 0x01
    14e8:	69 2f       	mov	r22, r25
    14ea:	41 e0       	ldi	r20, 0x01	; 1
    14ec:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
			break;
		default:
			break;
		}
}
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <CLCD_voidInit>:
#include "CLCD_interface.h"
#include "CLCD_private.h"
#include "CLCD_config.h"

void CLCD_voidInit		(	void	)
{
    14fe:	0f 93       	push	r16
    1500:	1f 93       	push	r17
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	cc 54       	subi	r28, 0x4C	; 76
    150c:	d0 40       	sbci	r29, 0x00	; 0
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	f8 94       	cli
    1512:	de bf       	out	0x3e, r29	; 62
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	cd bf       	out	0x3d, r28	; 61
	// Data Port --> OUTPUT
	DIO_voidSetPortDirection(CLCD_DATA_PORT , DIO_OUTPUT);
    1518:	82 e0       	ldi	r24, 0x02	; 2
    151a:	61 e0       	ldi	r22, 0x01	; 1
    151c:	0e 94 13 09 	call	0x1226	; 0x1226 <DIO_voidSetPortDirection>
	// Rs , RW , EN --> OUTPUT
	DIO_voidSetPinDirection(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_OUTPUT);
    1520:	83 e0       	ldi	r24, 0x03	; 3
    1522:	62 e0       	ldi	r22, 0x02	; 2
    1524:	41 e0       	ldi	r20, 0x01	; 1
    1526:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_OUTPUT);
    152a:	83 e0       	ldi	r24, 0x03	; 3
    152c:	61 e0       	ldi	r22, 0x01	; 1
    152e:	41 e0       	ldi	r20, 0x01	; 1
    1530:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CLCD_CTRL_PORT , CLCD_EN_PIN , DIO_OUTPUT);
    1534:	83 e0       	ldi	r24, 0x03	; 3
    1536:	60 e0       	ldi	r22, 0x00	; 0
    1538:	41 e0       	ldi	r20, 0x01	; 1
    153a:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetPinDirection>
    153e:	fe 01       	movw	r30, r28
    1540:	e7 5b       	subi	r30, 0xB7	; 183
    1542:	ff 4f       	sbci	r31, 0xFF	; 255
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	a8 e4       	ldi	r26, 0x48	; 72
    154a:	b2 e4       	ldi	r27, 0x42	; 66
    154c:	80 83       	st	Z, r24
    154e:	91 83       	std	Z+1, r25	; 0x01
    1550:	a2 83       	std	Z+2, r26	; 0x02
    1552:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1554:	8e 01       	movw	r16, r28
    1556:	0b 5b       	subi	r16, 0xBB	; 187
    1558:	1f 4f       	sbci	r17, 0xFF	; 255
    155a:	fe 01       	movw	r30, r28
    155c:	e7 5b       	subi	r30, 0xB7	; 183
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	60 81       	ld	r22, Z
    1562:	71 81       	ldd	r23, Z+1	; 0x01
    1564:	82 81       	ldd	r24, Z+2	; 0x02
    1566:	93 81       	ldd	r25, Z+3	; 0x03
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	4a ef       	ldi	r20, 0xFA	; 250
    156e:	54 e4       	ldi	r21, 0x44	; 68
    1570:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	f8 01       	movw	r30, r16
    157a:	80 83       	st	Z, r24
    157c:	91 83       	std	Z+1, r25	; 0x01
    157e:	a2 83       	std	Z+2, r26	; 0x02
    1580:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1582:	fe 01       	movw	r30, r28
    1584:	eb 5b       	subi	r30, 0xBB	; 187
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	60 81       	ld	r22, Z
    158a:	71 81       	ldd	r23, Z+1	; 0x01
    158c:	82 81       	ldd	r24, Z+2	; 0x02
    158e:	93 81       	ldd	r25, Z+3	; 0x03
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	40 e8       	ldi	r20, 0x80	; 128
    1596:	5f e3       	ldi	r21, 0x3F	; 63
    1598:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    159c:	88 23       	and	r24, r24
    159e:	44 f4       	brge	.+16     	; 0x15b0 <CLCD_voidInit+0xb2>
		__ticks = 1;
    15a0:	fe 01       	movw	r30, r28
    15a2:	ed 5b       	subi	r30, 0xBD	; 189
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	91 83       	std	Z+1, r25	; 0x01
    15ac:	80 83       	st	Z, r24
    15ae:	64 c0       	rjmp	.+200    	; 0x1678 <CLCD_voidInit+0x17a>
	else if (__tmp > 65535)
    15b0:	fe 01       	movw	r30, r28
    15b2:	eb 5b       	subi	r30, 0xBB	; 187
    15b4:	ff 4f       	sbci	r31, 0xFF	; 255
    15b6:	60 81       	ld	r22, Z
    15b8:	71 81       	ldd	r23, Z+1	; 0x01
    15ba:	82 81       	ldd	r24, Z+2	; 0x02
    15bc:	93 81       	ldd	r25, Z+3	; 0x03
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	3f ef       	ldi	r19, 0xFF	; 255
    15c2:	4f e7       	ldi	r20, 0x7F	; 127
    15c4:	57 e4       	ldi	r21, 0x47	; 71
    15c6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15ca:	18 16       	cp	r1, r24
    15cc:	0c f0       	brlt	.+2      	; 0x15d0 <CLCD_voidInit+0xd2>
    15ce:	43 c0       	rjmp	.+134    	; 0x1656 <CLCD_voidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d0:	fe 01       	movw	r30, r28
    15d2:	e7 5b       	subi	r30, 0xB7	; 183
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	60 81       	ld	r22, Z
    15d8:	71 81       	ldd	r23, Z+1	; 0x01
    15da:	82 81       	ldd	r24, Z+2	; 0x02
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e2       	ldi	r20, 0x20	; 32
    15e4:	51 e4       	ldi	r21, 0x41	; 65
    15e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	8e 01       	movw	r16, r28
    15f0:	0d 5b       	subi	r16, 0xBD	; 189
    15f2:	1f 4f       	sbci	r17, 0xFF	; 255
    15f4:	bc 01       	movw	r22, r24
    15f6:	cd 01       	movw	r24, r26
    15f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	f8 01       	movw	r30, r16
    1602:	91 83       	std	Z+1, r25	; 0x01
    1604:	80 83       	st	Z, r24
    1606:	1f c0       	rjmp	.+62     	; 0x1646 <CLCD_voidInit+0x148>
    1608:	fe 01       	movw	r30, r28
    160a:	ef 5b       	subi	r30, 0xBF	; 191
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	88 ec       	ldi	r24, 0xC8	; 200
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	91 83       	std	Z+1, r25	; 0x01
    1614:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1616:	fe 01       	movw	r30, r28
    1618:	ef 5b       	subi	r30, 0xBF	; 191
    161a:	ff 4f       	sbci	r31, 0xFF	; 255
    161c:	80 81       	ld	r24, Z
    161e:	91 81       	ldd	r25, Z+1	; 0x01
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	f1 f7       	brne	.-4      	; 0x1620 <CLCD_voidInit+0x122>
    1624:	fe 01       	movw	r30, r28
    1626:	ef 5b       	subi	r30, 0xBF	; 191
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	91 83       	std	Z+1, r25	; 0x01
    162c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162e:	de 01       	movw	r26, r28
    1630:	ad 5b       	subi	r26, 0xBD	; 189
    1632:	bf 4f       	sbci	r27, 0xFF	; 255
    1634:	fe 01       	movw	r30, r28
    1636:	ed 5b       	subi	r30, 0xBD	; 189
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	80 81       	ld	r24, Z
    163c:	91 81       	ldd	r25, Z+1	; 0x01
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	11 96       	adiw	r26, 0x01	; 1
    1642:	9c 93       	st	X, r25
    1644:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1646:	fe 01       	movw	r30, r28
    1648:	ed 5b       	subi	r30, 0xBD	; 189
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	80 81       	ld	r24, Z
    164e:	91 81       	ldd	r25, Z+1	; 0x01
    1650:	00 97       	sbiw	r24, 0x00	; 0
    1652:	d1 f6       	brne	.-76     	; 0x1608 <CLCD_voidInit+0x10a>
    1654:	24 c0       	rjmp	.+72     	; 0x169e <CLCD_voidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1656:	8e 01       	movw	r16, r28
    1658:	0d 5b       	subi	r16, 0xBD	; 189
    165a:	1f 4f       	sbci	r17, 0xFF	; 255
    165c:	fe 01       	movw	r30, r28
    165e:	eb 5b       	subi	r30, 0xBB	; 187
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	60 81       	ld	r22, Z
    1664:	71 81       	ldd	r23, Z+1	; 0x01
    1666:	82 81       	ldd	r24, Z+2	; 0x02
    1668:	93 81       	ldd	r25, Z+3	; 0x03
    166a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	f8 01       	movw	r30, r16
    1674:	91 83       	std	Z+1, r25	; 0x01
    1676:	80 83       	st	Z, r24
    1678:	fe 01       	movw	r30, r28
    167a:	ed 5b       	subi	r30, 0xBD	; 189
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	80 81       	ld	r24, Z
    1680:	91 81       	ldd	r25, Z+1	; 0x01
    1682:	fe 01       	movw	r30, r28
    1684:	ff 96       	adiw	r30, 0x3f	; 63
    1686:	91 83       	std	Z+1, r25	; 0x01
    1688:	80 83       	st	Z, r24
    168a:	fe 01       	movw	r30, r28
    168c:	ff 96       	adiw	r30, 0x3f	; 63
    168e:	80 81       	ld	r24, Z
    1690:	91 81       	ldd	r25, Z+1	; 0x01
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <CLCD_voidInit+0x194>
    1696:	fe 01       	movw	r30, r28
    1698:	ff 96       	adiw	r30, 0x3f	; 63
    169a:	91 83       	std	Z+1, r25	; 0x01
    169c:	80 83       	st	Z, r24

	/* Initilization Sequence */
	_delay_ms(50);
	/*Function Set */
	CLCD_voidSendCommand(0b00111000);
    169e:	88 e3       	ldi	r24, 0x38	; 56
    16a0:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <CLCD_voidSendCommand>
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	a8 e4       	ldi	r26, 0x48	; 72
    16aa:	b2 e4       	ldi	r27, 0x42	; 66
    16ac:	8b af       	std	Y+59, r24	; 0x3b
    16ae:	9c af       	std	Y+60, r25	; 0x3c
    16b0:	ad af       	std	Y+61, r26	; 0x3d
    16b2:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16b4:	6b ad       	ldd	r22, Y+59	; 0x3b
    16b6:	7c ad       	ldd	r23, Y+60	; 0x3c
    16b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    16ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    16bc:	2b ea       	ldi	r18, 0xAB	; 171
    16be:	3a ea       	ldi	r19, 0xAA	; 170
    16c0:	4a e2       	ldi	r20, 0x2A	; 42
    16c2:	50 e4       	ldi	r21, 0x40	; 64
    16c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	8f ab       	std	Y+55, r24	; 0x37
    16ce:	98 af       	std	Y+56, r25	; 0x38
    16d0:	a9 af       	std	Y+57, r26	; 0x39
    16d2:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    16d4:	6f a9       	ldd	r22, Y+55	; 0x37
    16d6:	78 ad       	ldd	r23, Y+56	; 0x38
    16d8:	89 ad       	ldd	r24, Y+57	; 0x39
    16da:	9a ad       	ldd	r25, Y+58	; 0x3a
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e8       	ldi	r20, 0x80	; 128
    16e2:	5f e3       	ldi	r21, 0x3F	; 63
    16e4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16e8:	88 23       	and	r24, r24
    16ea:	1c f4       	brge	.+6      	; 0x16f2 <CLCD_voidInit+0x1f4>
		__ticks = 1;
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	8e ab       	std	Y+54, r24	; 0x36
    16f0:	91 c0       	rjmp	.+290    	; 0x1814 <CLCD_voidInit+0x316>
	else if (__tmp > 255)
    16f2:	6f a9       	ldd	r22, Y+55	; 0x37
    16f4:	78 ad       	ldd	r23, Y+56	; 0x38
    16f6:	89 ad       	ldd	r24, Y+57	; 0x39
    16f8:	9a ad       	ldd	r25, Y+58	; 0x3a
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	4f e7       	ldi	r20, 0x7F	; 127
    1700:	53 e4       	ldi	r21, 0x43	; 67
    1702:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1706:	18 16       	cp	r1, r24
    1708:	0c f0       	brlt	.+2      	; 0x170c <CLCD_voidInit+0x20e>
    170a:	7b c0       	rjmp	.+246    	; 0x1802 <CLCD_voidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    170c:	6b ad       	ldd	r22, Y+59	; 0x3b
    170e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1710:	8d ad       	ldd	r24, Y+61	; 0x3d
    1712:	9e ad       	ldd	r25, Y+62	; 0x3e
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	4a e7       	ldi	r20, 0x7A	; 122
    171a:	54 e4       	ldi	r21, 0x44	; 68
    171c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	8a ab       	std	Y+50, r24	; 0x32
    1726:	9b ab       	std	Y+51, r25	; 0x33
    1728:	ac ab       	std	Y+52, r26	; 0x34
    172a:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    172c:	6a a9       	ldd	r22, Y+50	; 0x32
    172e:	7b a9       	ldd	r23, Y+51	; 0x33
    1730:	8c a9       	ldd	r24, Y+52	; 0x34
    1732:	9d a9       	ldd	r25, Y+53	; 0x35
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	4a ef       	ldi	r20, 0xFA	; 250
    173a:	54 e4       	ldi	r21, 0x44	; 68
    173c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	8e a7       	std	Y+46, r24	; 0x2e
    1746:	9f a7       	std	Y+47, r25	; 0x2f
    1748:	a8 ab       	std	Y+48, r26	; 0x30
    174a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    174c:	6e a5       	ldd	r22, Y+46	; 0x2e
    174e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1750:	88 a9       	ldd	r24, Y+48	; 0x30
    1752:	99 a9       	ldd	r25, Y+49	; 0x31
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 e8       	ldi	r20, 0x80	; 128
    175a:	5f e3       	ldi	r21, 0x3F	; 63
    175c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1760:	88 23       	and	r24, r24
    1762:	2c f4       	brge	.+10     	; 0x176e <CLCD_voidInit+0x270>
		__ticks = 1;
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	9d a7       	std	Y+45, r25	; 0x2d
    176a:	8c a7       	std	Y+44, r24	; 0x2c
    176c:	3f c0       	rjmp	.+126    	; 0x17ec <CLCD_voidInit+0x2ee>
	else if (__tmp > 65535)
    176e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1770:	7f a5       	ldd	r23, Y+47	; 0x2f
    1772:	88 a9       	ldd	r24, Y+48	; 0x30
    1774:	99 a9       	ldd	r25, Y+49	; 0x31
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	3f ef       	ldi	r19, 0xFF	; 255
    177a:	4f e7       	ldi	r20, 0x7F	; 127
    177c:	57 e4       	ldi	r21, 0x47	; 71
    177e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1782:	18 16       	cp	r1, r24
    1784:	4c f5       	brge	.+82     	; 0x17d8 <CLCD_voidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1786:	6a a9       	ldd	r22, Y+50	; 0x32
    1788:	7b a9       	ldd	r23, Y+51	; 0x33
    178a:	8c a9       	ldd	r24, Y+52	; 0x34
    178c:	9d a9       	ldd	r25, Y+53	; 0x35
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	40 e2       	ldi	r20, 0x20	; 32
    1794:	51 e4       	ldi	r21, 0x41	; 65
    1796:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	bc 01       	movw	r22, r24
    17a0:	cd 01       	movw	r24, r26
    17a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	9d a7       	std	Y+45, r25	; 0x2d
    17ac:	8c a7       	std	Y+44, r24	; 0x2c
    17ae:	0f c0       	rjmp	.+30     	; 0x17ce <CLCD_voidInit+0x2d0>
    17b0:	88 ec       	ldi	r24, 0xC8	; 200
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	9b a7       	std	Y+43, r25	; 0x2b
    17b6:	8a a7       	std	Y+42, r24	; 0x2a
    17b8:	8a a5       	ldd	r24, Y+42	; 0x2a
    17ba:	9b a5       	ldd	r25, Y+43	; 0x2b
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	f1 f7       	brne	.-4      	; 0x17bc <CLCD_voidInit+0x2be>
    17c0:	9b a7       	std	Y+43, r25	; 0x2b
    17c2:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c4:	8c a5       	ldd	r24, Y+44	; 0x2c
    17c6:	9d a5       	ldd	r25, Y+45	; 0x2d
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	9d a7       	std	Y+45, r25	; 0x2d
    17cc:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ce:	8c a5       	ldd	r24, Y+44	; 0x2c
    17d0:	9d a5       	ldd	r25, Y+45	; 0x2d
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	69 f7       	brne	.-38     	; 0x17b0 <CLCD_voidInit+0x2b2>
    17d6:	24 c0       	rjmp	.+72     	; 0x1820 <CLCD_voidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d8:	6e a5       	ldd	r22, Y+46	; 0x2e
    17da:	7f a5       	ldd	r23, Y+47	; 0x2f
    17dc:	88 a9       	ldd	r24, Y+48	; 0x30
    17de:	99 a9       	ldd	r25, Y+49	; 0x31
    17e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	9d a7       	std	Y+45, r25	; 0x2d
    17ea:	8c a7       	std	Y+44, r24	; 0x2c
    17ec:	8c a5       	ldd	r24, Y+44	; 0x2c
    17ee:	9d a5       	ldd	r25, Y+45	; 0x2d
    17f0:	99 a7       	std	Y+41, r25	; 0x29
    17f2:	88 a7       	std	Y+40, r24	; 0x28
    17f4:	88 a5       	ldd	r24, Y+40	; 0x28
    17f6:	99 a5       	ldd	r25, Y+41	; 0x29
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	f1 f7       	brne	.-4      	; 0x17f8 <CLCD_voidInit+0x2fa>
    17fc:	99 a7       	std	Y+41, r25	; 0x29
    17fe:	88 a7       	std	Y+40, r24	; 0x28
    1800:	0f c0       	rjmp	.+30     	; 0x1820 <CLCD_voidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1802:	6f a9       	ldd	r22, Y+55	; 0x37
    1804:	78 ad       	ldd	r23, Y+56	; 0x38
    1806:	89 ad       	ldd	r24, Y+57	; 0x39
    1808:	9a ad       	ldd	r25, Y+58	; 0x3a
    180a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	8e ab       	std	Y+54, r24	; 0x36
    1814:	8e a9       	ldd	r24, Y+54	; 0x36
    1816:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1818:	8f a1       	ldd	r24, Y+39	; 0x27
    181a:	8a 95       	dec	r24
    181c:	f1 f7       	brne	.-4      	; 0x181a <CLCD_voidInit+0x31c>
    181e:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	/*Display ON/OFF*/
	CLCD_voidSendCommand(0b00001100);
    1820:	8c e0       	ldi	r24, 0x0C	; 12
    1822:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <CLCD_voidSendCommand>
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	a8 e4       	ldi	r26, 0x48	; 72
    182c:	b2 e4       	ldi	r27, 0x42	; 66
    182e:	8b a3       	std	Y+35, r24	; 0x23
    1830:	9c a3       	std	Y+36, r25	; 0x24
    1832:	ad a3       	std	Y+37, r26	; 0x25
    1834:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1836:	6b a1       	ldd	r22, Y+35	; 0x23
    1838:	7c a1       	ldd	r23, Y+36	; 0x24
    183a:	8d a1       	ldd	r24, Y+37	; 0x25
    183c:	9e a1       	ldd	r25, Y+38	; 0x26
    183e:	2b ea       	ldi	r18, 0xAB	; 171
    1840:	3a ea       	ldi	r19, 0xAA	; 170
    1842:	4a e2       	ldi	r20, 0x2A	; 42
    1844:	50 e4       	ldi	r21, 0x40	; 64
    1846:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	8f 8f       	std	Y+31, r24	; 0x1f
    1850:	98 a3       	std	Y+32, r25	; 0x20
    1852:	a9 a3       	std	Y+33, r26	; 0x21
    1854:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1856:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1858:	78 a1       	ldd	r23, Y+32	; 0x20
    185a:	89 a1       	ldd	r24, Y+33	; 0x21
    185c:	9a a1       	ldd	r25, Y+34	; 0x22
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e8       	ldi	r20, 0x80	; 128
    1864:	5f e3       	ldi	r21, 0x3F	; 63
    1866:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    186a:	88 23       	and	r24, r24
    186c:	1c f4       	brge	.+6      	; 0x1874 <CLCD_voidInit+0x376>
		__ticks = 1;
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	8e 8f       	std	Y+30, r24	; 0x1e
    1872:	91 c0       	rjmp	.+290    	; 0x1996 <CLCD_voidInit+0x498>
	else if (__tmp > 255)
    1874:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1876:	78 a1       	ldd	r23, Y+32	; 0x20
    1878:	89 a1       	ldd	r24, Y+33	; 0x21
    187a:	9a a1       	ldd	r25, Y+34	; 0x22
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	4f e7       	ldi	r20, 0x7F	; 127
    1882:	53 e4       	ldi	r21, 0x43	; 67
    1884:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1888:	18 16       	cp	r1, r24
    188a:	0c f0       	brlt	.+2      	; 0x188e <CLCD_voidInit+0x390>
    188c:	7b c0       	rjmp	.+246    	; 0x1984 <CLCD_voidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    188e:	6b a1       	ldd	r22, Y+35	; 0x23
    1890:	7c a1       	ldd	r23, Y+36	; 0x24
    1892:	8d a1       	ldd	r24, Y+37	; 0x25
    1894:	9e a1       	ldd	r25, Y+38	; 0x26
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	4a e7       	ldi	r20, 0x7A	; 122
    189c:	54 e4       	ldi	r21, 0x44	; 68
    189e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	8a 8f       	std	Y+26, r24	; 0x1a
    18a8:	9b 8f       	std	Y+27, r25	; 0x1b
    18aa:	ac 8f       	std	Y+28, r26	; 0x1c
    18ac:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ae:	6a 8d       	ldd	r22, Y+26	; 0x1a
    18b0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    18b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18b4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	4a ef       	ldi	r20, 0xFA	; 250
    18bc:	54 e4       	ldi	r21, 0x44	; 68
    18be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	8e 8b       	std	Y+22, r24	; 0x16
    18c8:	9f 8b       	std	Y+23, r25	; 0x17
    18ca:	a8 8f       	std	Y+24, r26	; 0x18
    18cc:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    18ce:	6e 89       	ldd	r22, Y+22	; 0x16
    18d0:	7f 89       	ldd	r23, Y+23	; 0x17
    18d2:	88 8d       	ldd	r24, Y+24	; 0x18
    18d4:	99 8d       	ldd	r25, Y+25	; 0x19
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e8       	ldi	r20, 0x80	; 128
    18dc:	5f e3       	ldi	r21, 0x3F	; 63
    18de:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18e2:	88 23       	and	r24, r24
    18e4:	2c f4       	brge	.+10     	; 0x18f0 <CLCD_voidInit+0x3f2>
		__ticks = 1;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	9d 8b       	std	Y+21, r25	; 0x15
    18ec:	8c 8b       	std	Y+20, r24	; 0x14
    18ee:	3f c0       	rjmp	.+126    	; 0x196e <CLCD_voidInit+0x470>
	else if (__tmp > 65535)
    18f0:	6e 89       	ldd	r22, Y+22	; 0x16
    18f2:	7f 89       	ldd	r23, Y+23	; 0x17
    18f4:	88 8d       	ldd	r24, Y+24	; 0x18
    18f6:	99 8d       	ldd	r25, Y+25	; 0x19
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	3f ef       	ldi	r19, 0xFF	; 255
    18fc:	4f e7       	ldi	r20, 0x7F	; 127
    18fe:	57 e4       	ldi	r21, 0x47	; 71
    1900:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1904:	18 16       	cp	r1, r24
    1906:	4c f5       	brge	.+82     	; 0x195a <CLCD_voidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1908:	6a 8d       	ldd	r22, Y+26	; 0x1a
    190a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    190c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    190e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e2       	ldi	r20, 0x20	; 32
    1916:	51 e4       	ldi	r21, 0x41	; 65
    1918:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	bc 01       	movw	r22, r24
    1922:	cd 01       	movw	r24, r26
    1924:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	9d 8b       	std	Y+21, r25	; 0x15
    192e:	8c 8b       	std	Y+20, r24	; 0x14
    1930:	0f c0       	rjmp	.+30     	; 0x1950 <CLCD_voidInit+0x452>
    1932:	88 ec       	ldi	r24, 0xC8	; 200
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	9b 8b       	std	Y+19, r25	; 0x13
    1938:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    193a:	8a 89       	ldd	r24, Y+18	; 0x12
    193c:	9b 89       	ldd	r25, Y+19	; 0x13
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	f1 f7       	brne	.-4      	; 0x193e <CLCD_voidInit+0x440>
    1942:	9b 8b       	std	Y+19, r25	; 0x13
    1944:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1946:	8c 89       	ldd	r24, Y+20	; 0x14
    1948:	9d 89       	ldd	r25, Y+21	; 0x15
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	9d 8b       	std	Y+21, r25	; 0x15
    194e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1950:	8c 89       	ldd	r24, Y+20	; 0x14
    1952:	9d 89       	ldd	r25, Y+21	; 0x15
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	69 f7       	brne	.-38     	; 0x1932 <CLCD_voidInit+0x434>
    1958:	24 c0       	rjmp	.+72     	; 0x19a2 <CLCD_voidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195a:	6e 89       	ldd	r22, Y+22	; 0x16
    195c:	7f 89       	ldd	r23, Y+23	; 0x17
    195e:	88 8d       	ldd	r24, Y+24	; 0x18
    1960:	99 8d       	ldd	r25, Y+25	; 0x19
    1962:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	9d 8b       	std	Y+21, r25	; 0x15
    196c:	8c 8b       	std	Y+20, r24	; 0x14
    196e:	8c 89       	ldd	r24, Y+20	; 0x14
    1970:	9d 89       	ldd	r25, Y+21	; 0x15
    1972:	99 8b       	std	Y+17, r25	; 0x11
    1974:	88 8b       	std	Y+16, r24	; 0x10
    1976:	88 89       	ldd	r24, Y+16	; 0x10
    1978:	99 89       	ldd	r25, Y+17	; 0x11
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	f1 f7       	brne	.-4      	; 0x197a <CLCD_voidInit+0x47c>
    197e:	99 8b       	std	Y+17, r25	; 0x11
    1980:	88 8b       	std	Y+16, r24	; 0x10
    1982:	0f c0       	rjmp	.+30     	; 0x19a2 <CLCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1984:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1986:	78 a1       	ldd	r23, Y+32	; 0x20
    1988:	89 a1       	ldd	r24, Y+33	; 0x21
    198a:	9a a1       	ldd	r25, Y+34	; 0x22
    198c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	8e 8f       	std	Y+30, r24	; 0x1e
    1996:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1998:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    199a:	8f 85       	ldd	r24, Y+15	; 0x0f
    199c:	8a 95       	dec	r24
    199e:	f1 f7       	brne	.-4      	; 0x199c <CLCD_voidInit+0x49e>
    19a0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	/*Display Clear */
	CLCD_voidSendCommand(0x01);
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <CLCD_voidSendCommand>
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	a0 e0       	ldi	r26, 0x00	; 0
    19ae:	b0 e4       	ldi	r27, 0x40	; 64
    19b0:	8b 87       	std	Y+11, r24	; 0x0b
    19b2:	9c 87       	std	Y+12, r25	; 0x0c
    19b4:	ad 87       	std	Y+13, r26	; 0x0d
    19b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    19bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    19be:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	4a ef       	ldi	r20, 0xFA	; 250
    19c6:	54 e4       	ldi	r21, 0x44	; 68
    19c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	8f 83       	std	Y+7, r24	; 0x07
    19d2:	98 87       	std	Y+8, r25	; 0x08
    19d4:	a9 87       	std	Y+9, r26	; 0x09
    19d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19d8:	6f 81       	ldd	r22, Y+7	; 0x07
    19da:	78 85       	ldd	r23, Y+8	; 0x08
    19dc:	89 85       	ldd	r24, Y+9	; 0x09
    19de:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	40 e8       	ldi	r20, 0x80	; 128
    19e6:	5f e3       	ldi	r21, 0x3F	; 63
    19e8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19ec:	88 23       	and	r24, r24
    19ee:	2c f4       	brge	.+10     	; 0x19fa <CLCD_voidInit+0x4fc>
		__ticks = 1;
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	9e 83       	std	Y+6, r25	; 0x06
    19f6:	8d 83       	std	Y+5, r24	; 0x05
    19f8:	3f c0       	rjmp	.+126    	; 0x1a78 <CLCD_voidInit+0x57a>
	else if (__tmp > 65535)
    19fa:	6f 81       	ldd	r22, Y+7	; 0x07
    19fc:	78 85       	ldd	r23, Y+8	; 0x08
    19fe:	89 85       	ldd	r24, Y+9	; 0x09
    1a00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	3f ef       	ldi	r19, 0xFF	; 255
    1a06:	4f e7       	ldi	r20, 0x7F	; 127
    1a08:	57 e4       	ldi	r21, 0x47	; 71
    1a0a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a0e:	18 16       	cp	r1, r24
    1a10:	4c f5       	brge	.+82     	; 0x1a64 <CLCD_voidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	40 e2       	ldi	r20, 0x20	; 32
    1a20:	51 e4       	ldi	r21, 0x41	; 65
    1a22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	bc 01       	movw	r22, r24
    1a2c:	cd 01       	movw	r24, r26
    1a2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	9e 83       	std	Y+6, r25	; 0x06
    1a38:	8d 83       	std	Y+5, r24	; 0x05
    1a3a:	0f c0       	rjmp	.+30     	; 0x1a5a <CLCD_voidInit+0x55c>
    1a3c:	88 ec       	ldi	r24, 0xC8	; 200
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	9c 83       	std	Y+4, r25	; 0x04
    1a42:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	9c 81       	ldd	r25, Y+4	; 0x04
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	f1 f7       	brne	.-4      	; 0x1a48 <CLCD_voidInit+0x54a>
    1a4c:	9c 83       	std	Y+4, r25	; 0x04
    1a4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a50:	8d 81       	ldd	r24, Y+5	; 0x05
    1a52:	9e 81       	ldd	r25, Y+6	; 0x06
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	9e 83       	std	Y+6, r25	; 0x06
    1a58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5e:	00 97       	sbiw	r24, 0x00	; 0
    1a60:	69 f7       	brne	.-38     	; 0x1a3c <CLCD_voidInit+0x53e>
    1a62:	14 c0       	rjmp	.+40     	; 0x1a8c <CLCD_voidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a64:	6f 81       	ldd	r22, Y+7	; 0x07
    1a66:	78 85       	ldd	r23, Y+8	; 0x08
    1a68:	89 85       	ldd	r24, Y+9	; 0x09
    1a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	9e 83       	std	Y+6, r25	; 0x06
    1a76:	8d 83       	std	Y+5, r24	; 0x05
    1a78:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7c:	9a 83       	std	Y+2, r25	; 0x02
    1a7e:	89 83       	std	Y+1, r24	; 0x01
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	9a 81       	ldd	r25, Y+2	; 0x02
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	f1 f7       	brne	.-4      	; 0x1a84 <CLCD_voidInit+0x586>
    1a88:	9a 83       	std	Y+2, r25	; 0x02
    1a8a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Entry Mode Set */
	CLCD_voidSendCommand(0b00000110);
    1a8c:	86 e0       	ldi	r24, 0x06	; 6
    1a8e:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <CLCD_voidSendCommand>

}
    1a92:	c4 5b       	subi	r28, 0xB4	; 180
    1a94:	df 4f       	sbci	r29, 0xFF	; 255
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	1f 91       	pop	r17
    1aa6:	0f 91       	pop	r16
    1aa8:	08 95       	ret

00001aaa <CLCD_voidSendCommand>:

void CLCD_voidSendCommand	(u8 Copy_u8Command	)
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	a7 97       	sbiw	r28, 0x27	; 39
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	8f a3       	std	Y+39, r24	; 0x27
	/*Rs -> Low (To Send Command )*/
	DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_LOW);
    1ac0:	83 e0       	ldi	r24, 0x03	; 3
    1ac2:	62 e0       	ldi	r22, 0x02	; 2
    1ac4:	40 e0       	ldi	r20, 0x00	; 0
    1ac6:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	/*Rw -> Low	(To Write)*/
	DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_LOW);
    1aca:	83 e0       	ldi	r24, 0x03	; 3
    1acc:	61 e0       	ldi	r22, 0x01	; 1
    1ace:	40 e0       	ldi	r20, 0x00	; 0
    1ad0:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
	/*	Send Command */
	DIO_voidSetPortValue(CLCD_DATA_PORT , Copy_u8Command);
    1ad4:	82 e0       	ldi	r24, 0x02	; 2
    1ad6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ad8:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_voidSetPortValue>
	/*Enable Sequence */
	DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , DIO_HIGH);
    1adc:	83 e0       	ldi	r24, 0x03	; 3
    1ade:	60 e0       	ldi	r22, 0x00	; 0
    1ae0:	41 e0       	ldi	r20, 0x01	; 1
    1ae2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	a0 e8       	ldi	r26, 0x80	; 128
    1aec:	bf e3       	ldi	r27, 0x3F	; 63
    1aee:	8b a3       	std	Y+35, r24	; 0x23
    1af0:	9c a3       	std	Y+36, r25	; 0x24
    1af2:	ad a3       	std	Y+37, r26	; 0x25
    1af4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1af6:	6b a1       	ldd	r22, Y+35	; 0x23
    1af8:	7c a1       	ldd	r23, Y+36	; 0x24
    1afa:	8d a1       	ldd	r24, Y+37	; 0x25
    1afc:	9e a1       	ldd	r25, Y+38	; 0x26
    1afe:	2b ea       	ldi	r18, 0xAB	; 171
    1b00:	3a ea       	ldi	r19, 0xAA	; 170
    1b02:	4a e2       	ldi	r20, 0x2A	; 42
    1b04:	50 e4       	ldi	r21, 0x40	; 64
    1b06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	8f 8f       	std	Y+31, r24	; 0x1f
    1b10:	98 a3       	std	Y+32, r25	; 0x20
    1b12:	a9 a3       	std	Y+33, r26	; 0x21
    1b14:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1b16:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b18:	78 a1       	ldd	r23, Y+32	; 0x20
    1b1a:	89 a1       	ldd	r24, Y+33	; 0x21
    1b1c:	9a a1       	ldd	r25, Y+34	; 0x22
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	40 e8       	ldi	r20, 0x80	; 128
    1b24:	5f e3       	ldi	r21, 0x3F	; 63
    1b26:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b2a:	88 23       	and	r24, r24
    1b2c:	1c f4       	brge	.+6      	; 0x1b34 <CLCD_voidSendCommand+0x8a>
		__ticks = 1;
    1b2e:	81 e0       	ldi	r24, 0x01	; 1
    1b30:	8e 8f       	std	Y+30, r24	; 0x1e
    1b32:	91 c0       	rjmp	.+290    	; 0x1c56 <CLCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    1b34:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b36:	78 a1       	ldd	r23, Y+32	; 0x20
    1b38:	89 a1       	ldd	r24, Y+33	; 0x21
    1b3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	4f e7       	ldi	r20, 0x7F	; 127
    1b42:	53 e4       	ldi	r21, 0x43	; 67
    1b44:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b48:	18 16       	cp	r1, r24
    1b4a:	0c f0       	brlt	.+2      	; 0x1b4e <CLCD_voidSendCommand+0xa4>
    1b4c:	7b c0       	rjmp	.+246    	; 0x1c44 <CLCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1b4e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b50:	7c a1       	ldd	r23, Y+36	; 0x24
    1b52:	8d a1       	ldd	r24, Y+37	; 0x25
    1b54:	9e a1       	ldd	r25, Y+38	; 0x26
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	4a e7       	ldi	r20, 0x7A	; 122
    1b5c:	54 e4       	ldi	r21, 0x44	; 68
    1b5e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	8a 8f       	std	Y+26, r24	; 0x1a
    1b68:	9b 8f       	std	Y+27, r25	; 0x1b
    1b6a:	ac 8f       	std	Y+28, r26	; 0x1c
    1b6c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b6e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b70:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b72:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b74:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	4a ef       	ldi	r20, 0xFA	; 250
    1b7c:	54 e4       	ldi	r21, 0x44	; 68
    1b7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	8e 8b       	std	Y+22, r24	; 0x16
    1b88:	9f 8b       	std	Y+23, r25	; 0x17
    1b8a:	a8 8f       	std	Y+24, r26	; 0x18
    1b8c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1b8e:	6e 89       	ldd	r22, Y+22	; 0x16
    1b90:	7f 89       	ldd	r23, Y+23	; 0x17
    1b92:	88 8d       	ldd	r24, Y+24	; 0x18
    1b94:	99 8d       	ldd	r25, Y+25	; 0x19
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e8       	ldi	r20, 0x80	; 128
    1b9c:	5f e3       	ldi	r21, 0x3F	; 63
    1b9e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ba2:	88 23       	and	r24, r24
    1ba4:	2c f4       	brge	.+10     	; 0x1bb0 <CLCD_voidSendCommand+0x106>
		__ticks = 1;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	9d 8b       	std	Y+21, r25	; 0x15
    1bac:	8c 8b       	std	Y+20, r24	; 0x14
    1bae:	3f c0       	rjmp	.+126    	; 0x1c2e <CLCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    1bb0:	6e 89       	ldd	r22, Y+22	; 0x16
    1bb2:	7f 89       	ldd	r23, Y+23	; 0x17
    1bb4:	88 8d       	ldd	r24, Y+24	; 0x18
    1bb6:	99 8d       	ldd	r25, Y+25	; 0x19
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	3f ef       	ldi	r19, 0xFF	; 255
    1bbc:	4f e7       	ldi	r20, 0x7F	; 127
    1bbe:	57 e4       	ldi	r21, 0x47	; 71
    1bc0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bc4:	18 16       	cp	r1, r24
    1bc6:	4c f5       	brge	.+82     	; 0x1c1a <CLCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1bca:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1bcc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bce:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e2       	ldi	r20, 0x20	; 32
    1bd6:	51 e4       	ldi	r21, 0x41	; 65
    1bd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	bc 01       	movw	r22, r24
    1be2:	cd 01       	movw	r24, r26
    1be4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	9d 8b       	std	Y+21, r25	; 0x15
    1bee:	8c 8b       	std	Y+20, r24	; 0x14
    1bf0:	0f c0       	rjmp	.+30     	; 0x1c10 <CLCD_voidSendCommand+0x166>
    1bf2:	88 ec       	ldi	r24, 0xC8	; 200
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	9b 8b       	std	Y+19, r25	; 0x13
    1bf8:	8a 8b       	std	Y+18, r24	; 0x12
    1bfa:	8a 89       	ldd	r24, Y+18	; 0x12
    1bfc:	9b 89       	ldd	r25, Y+19	; 0x13
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <CLCD_voidSendCommand+0x154>
    1c02:	9b 8b       	std	Y+19, r25	; 0x13
    1c04:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c06:	8c 89       	ldd	r24, Y+20	; 0x14
    1c08:	9d 89       	ldd	r25, Y+21	; 0x15
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	9d 8b       	std	Y+21, r25	; 0x15
    1c0e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c10:	8c 89       	ldd	r24, Y+20	; 0x14
    1c12:	9d 89       	ldd	r25, Y+21	; 0x15
    1c14:	00 97       	sbiw	r24, 0x00	; 0
    1c16:	69 f7       	brne	.-38     	; 0x1bf2 <CLCD_voidSendCommand+0x148>
    1c18:	24 c0       	rjmp	.+72     	; 0x1c62 <CLCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1a:	6e 89       	ldd	r22, Y+22	; 0x16
    1c1c:	7f 89       	ldd	r23, Y+23	; 0x17
    1c1e:	88 8d       	ldd	r24, Y+24	; 0x18
    1c20:	99 8d       	ldd	r25, Y+25	; 0x19
    1c22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	9d 8b       	std	Y+21, r25	; 0x15
    1c2c:	8c 8b       	std	Y+20, r24	; 0x14
    1c2e:	8c 89       	ldd	r24, Y+20	; 0x14
    1c30:	9d 89       	ldd	r25, Y+21	; 0x15
    1c32:	99 8b       	std	Y+17, r25	; 0x11
    1c34:	88 8b       	std	Y+16, r24	; 0x10
    1c36:	88 89       	ldd	r24, Y+16	; 0x10
    1c38:	99 89       	ldd	r25, Y+17	; 0x11
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
    1c3c:	f1 f7       	brne	.-4      	; 0x1c3a <CLCD_voidSendCommand+0x190>
    1c3e:	99 8b       	std	Y+17, r25	; 0x11
    1c40:	88 8b       	std	Y+16, r24	; 0x10
    1c42:	0f c0       	rjmp	.+30     	; 0x1c62 <CLCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c44:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c46:	78 a1       	ldd	r23, Y+32	; 0x20
    1c48:	89 a1       	ldd	r24, Y+33	; 0x21
    1c4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	8e 8f       	std	Y+30, r24	; 0x1e
    1c56:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c58:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c5c:	8a 95       	dec	r24
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <CLCD_voidSendCommand+0x1b2>
    1c60:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , DIO_LOW);
    1c62:	83 e0       	ldi	r24, 0x03	; 3
    1c64:	60 e0       	ldi	r22, 0x00	; 0
    1c66:	40 e0       	ldi	r20, 0x00	; 0
    1c68:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	a0 e8       	ldi	r26, 0x80	; 128
    1c72:	bf e3       	ldi	r27, 0x3F	; 63
    1c74:	8b 87       	std	Y+11, r24	; 0x0b
    1c76:	9c 87       	std	Y+12, r25	; 0x0c
    1c78:	ad 87       	std	Y+13, r26	; 0x0d
    1c7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	4a ef       	ldi	r20, 0xFA	; 250
    1c8a:	54 e4       	ldi	r21, 0x44	; 68
    1c8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	8f 83       	std	Y+7, r24	; 0x07
    1c96:	98 87       	std	Y+8, r25	; 0x08
    1c98:	a9 87       	std	Y+9, r26	; 0x09
    1c9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ca0:	89 85       	ldd	r24, Y+9	; 0x09
    1ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	40 e8       	ldi	r20, 0x80	; 128
    1caa:	5f e3       	ldi	r21, 0x3F	; 63
    1cac:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1cb0:	88 23       	and	r24, r24
    1cb2:	2c f4       	brge	.+10     	; 0x1cbe <CLCD_voidSendCommand+0x214>
		__ticks = 1;
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	9e 83       	std	Y+6, r25	; 0x06
    1cba:	8d 83       	std	Y+5, r24	; 0x05
    1cbc:	3f c0       	rjmp	.+126    	; 0x1d3c <CLCD_voidSendCommand+0x292>
	else if (__tmp > 65535)
    1cbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc0:	78 85       	ldd	r23, Y+8	; 0x08
    1cc2:	89 85       	ldd	r24, Y+9	; 0x09
    1cc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	3f ef       	ldi	r19, 0xFF	; 255
    1cca:	4f e7       	ldi	r20, 0x7F	; 127
    1ccc:	57 e4       	ldi	r21, 0x47	; 71
    1cce:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cd2:	18 16       	cp	r1, r24
    1cd4:	4c f5       	brge	.+82     	; 0x1d28 <CLCD_voidSendCommand+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	40 e2       	ldi	r20, 0x20	; 32
    1ce4:	51 e4       	ldi	r21, 0x41	; 65
    1ce6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	bc 01       	movw	r22, r24
    1cf0:	cd 01       	movw	r24, r26
    1cf2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	9e 83       	std	Y+6, r25	; 0x06
    1cfc:	8d 83       	std	Y+5, r24	; 0x05
    1cfe:	0f c0       	rjmp	.+30     	; 0x1d1e <CLCD_voidSendCommand+0x274>
    1d00:	88 ec       	ldi	r24, 0xC8	; 200
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	9c 83       	std	Y+4, r25	; 0x04
    1d06:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	f1 f7       	brne	.-4      	; 0x1d0c <CLCD_voidSendCommand+0x262>
    1d10:	9c 83       	std	Y+4, r25	; 0x04
    1d12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d14:	8d 81       	ldd	r24, Y+5	; 0x05
    1d16:	9e 81       	ldd	r25, Y+6	; 0x06
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	9e 83       	std	Y+6, r25	; 0x06
    1d1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d20:	9e 81       	ldd	r25, Y+6	; 0x06
    1d22:	00 97       	sbiw	r24, 0x00	; 0
    1d24:	69 f7       	brne	.-38     	; 0x1d00 <CLCD_voidSendCommand+0x256>
    1d26:	14 c0       	rjmp	.+40     	; 0x1d50 <CLCD_voidSendCommand+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d28:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2a:	78 85       	ldd	r23, Y+8	; 0x08
    1d2c:	89 85       	ldd	r24, Y+9	; 0x09
    1d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	9e 83       	std	Y+6, r25	; 0x06
    1d3a:	8d 83       	std	Y+5, r24	; 0x05
    1d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d40:	9a 83       	std	Y+2, r25	; 0x02
    1d42:	89 83       	std	Y+1, r24	; 0x01
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	9a 81       	ldd	r25, Y+2	; 0x02
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	f1 f7       	brne	.-4      	; 0x1d48 <CLCD_voidSendCommand+0x29e>
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
    1d4e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    1d50:	a7 96       	adiw	r28, 0x27	; 39
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	cd bf       	out	0x3d, r28	; 61
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <CLCD_voidSendData>:
void CLCD_voidSendData		(u8 Copy_u8Data		)
{
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	cd b7       	in	r28, 0x3d	; 61
    1d68:	de b7       	in	r29, 0x3e	; 62
    1d6a:	a7 97       	sbiw	r28, 0x27	; 39
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	8f a3       	std	Y+39, r24	; 0x27
	/*Rs -> High (To Send Data )*/
		DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RS_PIN , DIO_HIGH);
    1d78:	83 e0       	ldi	r24, 0x03	; 3
    1d7a:	62 e0       	ldi	r22, 0x02	; 2
    1d7c:	41 e0       	ldi	r20, 0x01	; 1
    1d7e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
		/*Rw -> Low	(To Write)*/
		DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_RW_PIN , DIO_LOW);
    1d82:	83 e0       	ldi	r24, 0x03	; 3
    1d84:	61 e0       	ldi	r22, 0x01	; 1
    1d86:	40 e0       	ldi	r20, 0x00	; 0
    1d88:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
		/*	Send Command */
		DIO_voidSetPortValue(CLCD_DATA_PORT , Copy_u8Data);
    1d8c:	82 e0       	ldi	r24, 0x02	; 2
    1d8e:	6f a1       	ldd	r22, Y+39	; 0x27
    1d90:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_voidSetPortValue>
		/*Enable Sequence */
		DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , DIO_HIGH);
    1d94:	83 e0       	ldi	r24, 0x03	; 3
    1d96:	60 e0       	ldi	r22, 0x00	; 0
    1d98:	41 e0       	ldi	r20, 0x01	; 1
    1d9a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	a0 e8       	ldi	r26, 0x80	; 128
    1da4:	bf e3       	ldi	r27, 0x3F	; 63
    1da6:	8b a3       	std	Y+35, r24	; 0x23
    1da8:	9c a3       	std	Y+36, r25	; 0x24
    1daa:	ad a3       	std	Y+37, r26	; 0x25
    1dac:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1dae:	6b a1       	ldd	r22, Y+35	; 0x23
    1db0:	7c a1       	ldd	r23, Y+36	; 0x24
    1db2:	8d a1       	ldd	r24, Y+37	; 0x25
    1db4:	9e a1       	ldd	r25, Y+38	; 0x26
    1db6:	2b ea       	ldi	r18, 0xAB	; 171
    1db8:	3a ea       	ldi	r19, 0xAA	; 170
    1dba:	4a e2       	ldi	r20, 0x2A	; 42
    1dbc:	50 e4       	ldi	r21, 0x40	; 64
    1dbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	8f 8f       	std	Y+31, r24	; 0x1f
    1dc8:	98 a3       	std	Y+32, r25	; 0x20
    1dca:	a9 a3       	std	Y+33, r26	; 0x21
    1dcc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1dce:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1dd0:	78 a1       	ldd	r23, Y+32	; 0x20
    1dd2:	89 a1       	ldd	r24, Y+33	; 0x21
    1dd4:	9a a1       	ldd	r25, Y+34	; 0x22
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e8       	ldi	r20, 0x80	; 128
    1ddc:	5f e3       	ldi	r21, 0x3F	; 63
    1dde:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1de2:	88 23       	and	r24, r24
    1de4:	1c f4       	brge	.+6      	; 0x1dec <CLCD_voidSendData+0x8a>
		__ticks = 1;
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	8e 8f       	std	Y+30, r24	; 0x1e
    1dea:	91 c0       	rjmp	.+290    	; 0x1f0e <CLCD_voidSendData+0x1ac>
	else if (__tmp > 255)
    1dec:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1dee:	78 a1       	ldd	r23, Y+32	; 0x20
    1df0:	89 a1       	ldd	r24, Y+33	; 0x21
    1df2:	9a a1       	ldd	r25, Y+34	; 0x22
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	4f e7       	ldi	r20, 0x7F	; 127
    1dfa:	53 e4       	ldi	r21, 0x43	; 67
    1dfc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e00:	18 16       	cp	r1, r24
    1e02:	0c f0       	brlt	.+2      	; 0x1e06 <CLCD_voidSendData+0xa4>
    1e04:	7b c0       	rjmp	.+246    	; 0x1efc <CLCD_voidSendData+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1e06:	6b a1       	ldd	r22, Y+35	; 0x23
    1e08:	7c a1       	ldd	r23, Y+36	; 0x24
    1e0a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e0c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	4a e7       	ldi	r20, 0x7A	; 122
    1e14:	54 e4       	ldi	r21, 0x44	; 68
    1e16:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	8a 8f       	std	Y+26, r24	; 0x1a
    1e20:	9b 8f       	std	Y+27, r25	; 0x1b
    1e22:	ac 8f       	std	Y+28, r26	; 0x1c
    1e24:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e26:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1e28:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1e2a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e2c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	4a ef       	ldi	r20, 0xFA	; 250
    1e34:	54 e4       	ldi	r21, 0x44	; 68
    1e36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	8e 8b       	std	Y+22, r24	; 0x16
    1e40:	9f 8b       	std	Y+23, r25	; 0x17
    1e42:	a8 8f       	std	Y+24, r26	; 0x18
    1e44:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1e46:	6e 89       	ldd	r22, Y+22	; 0x16
    1e48:	7f 89       	ldd	r23, Y+23	; 0x17
    1e4a:	88 8d       	ldd	r24, Y+24	; 0x18
    1e4c:	99 8d       	ldd	r25, Y+25	; 0x19
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	40 e8       	ldi	r20, 0x80	; 128
    1e54:	5f e3       	ldi	r21, 0x3F	; 63
    1e56:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e5a:	88 23       	and	r24, r24
    1e5c:	2c f4       	brge	.+10     	; 0x1e68 <CLCD_voidSendData+0x106>
		__ticks = 1;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	9d 8b       	std	Y+21, r25	; 0x15
    1e64:	8c 8b       	std	Y+20, r24	; 0x14
    1e66:	3f c0       	rjmp	.+126    	; 0x1ee6 <CLCD_voidSendData+0x184>
	else if (__tmp > 65535)
    1e68:	6e 89       	ldd	r22, Y+22	; 0x16
    1e6a:	7f 89       	ldd	r23, Y+23	; 0x17
    1e6c:	88 8d       	ldd	r24, Y+24	; 0x18
    1e6e:	99 8d       	ldd	r25, Y+25	; 0x19
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	3f ef       	ldi	r19, 0xFF	; 255
    1e74:	4f e7       	ldi	r20, 0x7F	; 127
    1e76:	57 e4       	ldi	r21, 0x47	; 71
    1e78:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e7c:	18 16       	cp	r1, r24
    1e7e:	4c f5       	brge	.+82     	; 0x1ed2 <CLCD_voidSendData+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e80:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1e82:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1e84:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e86:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e2       	ldi	r20, 0x20	; 32
    1e8e:	51 e4       	ldi	r21, 0x41	; 65
    1e90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	bc 01       	movw	r22, r24
    1e9a:	cd 01       	movw	r24, r26
    1e9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9d 8b       	std	Y+21, r25	; 0x15
    1ea6:	8c 8b       	std	Y+20, r24	; 0x14
    1ea8:	0f c0       	rjmp	.+30     	; 0x1ec8 <CLCD_voidSendData+0x166>
    1eaa:	88 ec       	ldi	r24, 0xC8	; 200
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9b 8b       	std	Y+19, r25	; 0x13
    1eb0:	8a 8b       	std	Y+18, r24	; 0x12
    1eb2:	8a 89       	ldd	r24, Y+18	; 0x12
    1eb4:	9b 89       	ldd	r25, Y+19	; 0x13
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <CLCD_voidSendData+0x154>
    1eba:	9b 8b       	std	Y+19, r25	; 0x13
    1ebc:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ebe:	8c 89       	ldd	r24, Y+20	; 0x14
    1ec0:	9d 89       	ldd	r25, Y+21	; 0x15
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	9d 8b       	std	Y+21, r25	; 0x15
    1ec6:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec8:	8c 89       	ldd	r24, Y+20	; 0x14
    1eca:	9d 89       	ldd	r25, Y+21	; 0x15
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	69 f7       	brne	.-38     	; 0x1eaa <CLCD_voidSendData+0x148>
    1ed0:	24 c0       	rjmp	.+72     	; 0x1f1a <CLCD_voidSendData+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed2:	6e 89       	ldd	r22, Y+22	; 0x16
    1ed4:	7f 89       	ldd	r23, Y+23	; 0x17
    1ed6:	88 8d       	ldd	r24, Y+24	; 0x18
    1ed8:	99 8d       	ldd	r25, Y+25	; 0x19
    1eda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	9d 8b       	std	Y+21, r25	; 0x15
    1ee4:	8c 8b       	std	Y+20, r24	; 0x14
    1ee6:	8c 89       	ldd	r24, Y+20	; 0x14
    1ee8:	9d 89       	ldd	r25, Y+21	; 0x15
    1eea:	99 8b       	std	Y+17, r25	; 0x11
    1eec:	88 8b       	std	Y+16, r24	; 0x10
    1eee:	88 89       	ldd	r24, Y+16	; 0x10
    1ef0:	99 89       	ldd	r25, Y+17	; 0x11
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <CLCD_voidSendData+0x190>
    1ef6:	99 8b       	std	Y+17, r25	; 0x11
    1ef8:	88 8b       	std	Y+16, r24	; 0x10
    1efa:	0f c0       	rjmp	.+30     	; 0x1f1a <CLCD_voidSendData+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1efc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1efe:	78 a1       	ldd	r23, Y+32	; 0x20
    1f00:	89 a1       	ldd	r24, Y+33	; 0x21
    1f02:	9a a1       	ldd	r25, Y+34	; 0x22
    1f04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	8e 8f       	std	Y+30, r24	; 0x1e
    1f0e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f10:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f14:	8a 95       	dec	r24
    1f16:	f1 f7       	brne	.-4      	; 0x1f14 <CLCD_voidSendData+0x1b2>
    1f18:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(1);
		DIO_voidSetPinValue(CLCD_CTRL_PORT , CLCD_EN_PIN , DIO_LOW);
    1f1a:	83 e0       	ldi	r24, 0x03	; 3
    1f1c:	60 e0       	ldi	r22, 0x00	; 0
    1f1e:	40 e0       	ldi	r20, 0x00	; 0
    1f20:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	a0 e8       	ldi	r26, 0x80	; 128
    1f2a:	bf e3       	ldi	r27, 0x3F	; 63
    1f2c:	8b 87       	std	Y+11, r24	; 0x0b
    1f2e:	9c 87       	std	Y+12, r25	; 0x0c
    1f30:	ad 87       	std	Y+13, r26	; 0x0d
    1f32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	4a ef       	ldi	r20, 0xFA	; 250
    1f42:	54 e4       	ldi	r21, 0x44	; 68
    1f44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	8f 83       	std	Y+7, r24	; 0x07
    1f4e:	98 87       	std	Y+8, r25	; 0x08
    1f50:	a9 87       	std	Y+9, r26	; 0x09
    1f52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f54:	6f 81       	ldd	r22, Y+7	; 0x07
    1f56:	78 85       	ldd	r23, Y+8	; 0x08
    1f58:	89 85       	ldd	r24, Y+9	; 0x09
    1f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e8       	ldi	r20, 0x80	; 128
    1f62:	5f e3       	ldi	r21, 0x3F	; 63
    1f64:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f68:	88 23       	and	r24, r24
    1f6a:	2c f4       	brge	.+10     	; 0x1f76 <CLCD_voidSendData+0x214>
		__ticks = 1;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	9e 83       	std	Y+6, r25	; 0x06
    1f72:	8d 83       	std	Y+5, r24	; 0x05
    1f74:	3f c0       	rjmp	.+126    	; 0x1ff4 <CLCD_voidSendData+0x292>
	else if (__tmp > 65535)
    1f76:	6f 81       	ldd	r22, Y+7	; 0x07
    1f78:	78 85       	ldd	r23, Y+8	; 0x08
    1f7a:	89 85       	ldd	r24, Y+9	; 0x09
    1f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	3f ef       	ldi	r19, 0xFF	; 255
    1f82:	4f e7       	ldi	r20, 0x7F	; 127
    1f84:	57 e4       	ldi	r21, 0x47	; 71
    1f86:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f8a:	18 16       	cp	r1, r24
    1f8c:	4c f5       	brge	.+82     	; 0x1fe0 <CLCD_voidSendData+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e2       	ldi	r20, 0x20	; 32
    1f9c:	51 e4       	ldi	r21, 0x41	; 65
    1f9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	bc 01       	movw	r22, r24
    1fa8:	cd 01       	movw	r24, r26
    1faa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	9e 83       	std	Y+6, r25	; 0x06
    1fb4:	8d 83       	std	Y+5, r24	; 0x05
    1fb6:	0f c0       	rjmp	.+30     	; 0x1fd6 <CLCD_voidSendData+0x274>
    1fb8:	88 ec       	ldi	r24, 0xC8	; 200
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	9c 83       	std	Y+4, r25	; 0x04
    1fbe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	f1 f7       	brne	.-4      	; 0x1fc4 <CLCD_voidSendData+0x262>
    1fc8:	9c 83       	std	Y+4, r25	; 0x04
    1fca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fce:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	9e 83       	std	Y+6, r25	; 0x06
    1fd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fda:	00 97       	sbiw	r24, 0x00	; 0
    1fdc:	69 f7       	brne	.-38     	; 0x1fb8 <CLCD_voidSendData+0x256>
    1fde:	14 c0       	rjmp	.+40     	; 0x2008 <CLCD_voidSendData+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe2:	78 85       	ldd	r23, Y+8	; 0x08
    1fe4:	89 85       	ldd	r24, Y+9	; 0x09
    1fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	9e 83       	std	Y+6, r25	; 0x06
    1ff2:	8d 83       	std	Y+5, r24	; 0x05
    1ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff8:	9a 83       	std	Y+2, r25	; 0x02
    1ffa:	89 83       	std	Y+1, r24	; 0x01
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	f1 f7       	brne	.-4      	; 0x2000 <CLCD_voidSendData+0x29e>
    2004:	9a 83       	std	Y+2, r25	; 0x02
    2006:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);

}
    2008:	a7 96       	adiw	r28, 0x27	; 39
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <CLCD_voidSetPosition>:


void CLCD_voidSetPosition	(u8 Copy_u8Row , u8 Copy_u8Col)
{
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	00 d0       	rcall	.+0      	; 0x2020 <CLCD_voidSetPosition+0x6>
    2020:	00 d0       	rcall	.+0      	; 0x2022 <CLCD_voidSetPosition+0x8>
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	89 83       	std	Y+1, r24	; 0x01
    2028:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Row)
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	28 2f       	mov	r18, r24
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	3c 83       	std	Y+4, r19	; 0x04
    2032:	2b 83       	std	Y+3, r18	; 0x03
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	9c 81       	ldd	r25, Y+4	; 0x04
    2038:	00 97       	sbiw	r24, 0x00	; 0
    203a:	31 f0       	breq	.+12     	; 0x2048 <CLCD_voidSetPosition+0x2e>
    203c:	2b 81       	ldd	r18, Y+3	; 0x03
    203e:	3c 81       	ldd	r19, Y+4	; 0x04
    2040:	21 30       	cpi	r18, 0x01	; 1
    2042:	31 05       	cpc	r19, r1
    2044:	31 f0       	breq	.+12     	; 0x2052 <CLCD_voidSetPosition+0x38>
    2046:	09 c0       	rjmp	.+18     	; 0x205a <CLCD_voidSetPosition+0x40>
	{
	case CLCD_ROW_1 :	CLCD_voidSendCommand(	0x80 + Copy_u8Col - 1	);
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	81 58       	subi	r24, 0x81	; 129
    204c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <CLCD_voidSendCommand>
    2050:	04 c0       	rjmp	.+8      	; 0x205a <CLCD_voidSetPosition+0x40>
		break;
	case CLCD_ROW_2 :	CLCD_voidSendCommand(	0x80+ 64 + Copy_u8Col - 1	);
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	81 54       	subi	r24, 0x41	; 65
    2056:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <CLCD_voidSendCommand>
		break ;
	default :
		break;
	}
}
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	cf 91       	pop	r28
    2064:	df 91       	pop	r29
    2066:	08 95       	ret

00002068 <CLCD_voidSendExtraChar>:

void CLCD_voidSendExtraChar	(u8 Copy_u8PatternLocation , u8 * Copy_pu8ExtraChar , u8 Copy_u8Row , u8 Copy_u8Col )
{
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    2070:	27 97       	sbiw	r28, 0x07	; 7
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	de bf       	out	0x3e, r29	; 62
    2078:	0f be       	out	0x3f, r0	; 63
    207a:	cd bf       	out	0x3d, r28	; 61
    207c:	8b 83       	std	Y+3, r24	; 0x03
    207e:	7d 83       	std	Y+5, r23	; 0x05
    2080:	6c 83       	std	Y+4, r22	; 0x04
    2082:	4e 83       	std	Y+6, r20	; 0x06
    2084:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Address = 0 ;
    2086:	1a 82       	std	Y+2, r1	; 0x02
	Local_u8Address = Copy_u8PatternLocation * 8 ;
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	88 2f       	mov	r24, r24
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	88 0f       	add	r24, r24
    2090:	99 1f       	adc	r25, r25
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	88 0f       	add	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	8a 83       	std	Y+2, r24	; 0x02
	/*Go To CGRAM*/
	CLCD_voidSendCommand( 64 + Local_u8Address );
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	80 5c       	subi	r24, 0xC0	; 192
    20a0:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <CLCD_voidSendCommand>
	/*Generate Charachter  inside CGRAM*/
	for(u8 i = 0 ; i < 8 ; i++)
    20a4:	19 82       	std	Y+1, r1	; 0x01
    20a6:	0e c0       	rjmp	.+28     	; 0x20c4 <CLCD_voidSendExtraChar+0x5c>
	{
		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	8c 81       	ldd	r24, Y+4	; 0x04
    20b0:	9d 81       	ldd	r25, Y+5	; 0x05
    20b2:	fc 01       	movw	r30, r24
    20b4:	e2 0f       	add	r30, r18
    20b6:	f3 1f       	adc	r31, r19
    20b8:	80 81       	ld	r24, Z
    20ba:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <CLCD_voidSendData>
	u8 Local_u8Address = 0 ;
	Local_u8Address = Copy_u8PatternLocation * 8 ;
	/*Go To CGRAM*/
	CLCD_voidSendCommand( 64 + Local_u8Address );
	/*Generate Charachter  inside CGRAM*/
	for(u8 i = 0 ; i < 8 ; i++)
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	8f 5f       	subi	r24, 0xFF	; 255
    20c2:	89 83       	std	Y+1, r24	; 0x01
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	88 30       	cpi	r24, 0x08	; 8
    20c8:	78 f3       	brcs	.-34     	; 0x20a8 <CLCD_voidSendExtraChar+0x40>
	{
		CLCD_voidSendData(Copy_pu8ExtraChar[i]);
	}
	/*Back to DDRAM */
	CLCD_voidSetPosition(Copy_u8Row , Copy_u8Col);
    20ca:	8e 81       	ldd	r24, Y+6	; 0x06
    20cc:	6f 81       	ldd	r22, Y+7	; 0x07
    20ce:	0e 94 0d 10 	call	0x201a	; 0x201a <CLCD_voidSetPosition>
	/*Draw Charachter on display */
	CLCD_voidSendData(Copy_u8PatternLocation);
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <CLCD_voidSendData>
}
    20d8:	27 96       	adiw	r28, 0x07	; 7
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	de bf       	out	0x3e, r29	; 62
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	cd bf       	out	0x3d, r28	; 61
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	08 95       	ret

000020ea <CLCD_voidSendString>:

void CLCD_voidSendString	(u8 *Copy_pu8String )
{
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <CLCD_voidSendString+0x6>
    20f0:	0f 92       	push	r0
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	9b 83       	std	Y+3, r25	; 0x03
    20f8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iterator = 0 ;
    20fa:	19 82       	std	Y+1, r1	; 0x01
    20fc:	0e c0       	rjmp	.+28     	; 0x211a <CLCD_voidSendString+0x30>
	while(Copy_pu8String[Local_u8Iterator] != '\0')
	{
		CLCD_voidSendData(Copy_pu8String[Local_u8Iterator]);
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	28 2f       	mov	r18, r24
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
    2106:	9b 81       	ldd	r25, Y+3	; 0x03
    2108:	fc 01       	movw	r30, r24
    210a:	e2 0f       	add	r30, r18
    210c:	f3 1f       	adc	r31, r19
    210e:	80 81       	ld	r24, Z
    2110:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <CLCD_voidSendData>
		Local_u8Iterator ++ ;
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	8f 5f       	subi	r24, 0xFF	; 255
    2118:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString	(u8 *Copy_pu8String )
{
	u8 Local_u8Iterator = 0 ;
	while(Copy_pu8String[Local_u8Iterator] != '\0')
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	28 2f       	mov	r18, r24
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	9b 81       	ldd	r25, Y+3	; 0x03
    2124:	fc 01       	movw	r30, r24
    2126:	e2 0f       	add	r30, r18
    2128:	f3 1f       	adc	r31, r19
    212a:	80 81       	ld	r24, Z
    212c:	88 23       	and	r24, r24
    212e:	39 f7       	brne	.-50     	; 0x20fe <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pu8String[Local_u8Iterator]);
		Local_u8Iterator ++ ;
	}
}
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	cf 91       	pop	r28
    2138:	df 91       	pop	r29
    213a:	08 95       	ret

0000213c <main>:
		  0x04,
		  0x0A,
		  0x11
};
int main(void)
{
    213c:	0f 93       	push	r16
    213e:	1f 93       	push	r17
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	c7 58       	subi	r28, 0x87	; 135
    214a:	d0 40       	sbci	r29, 0x00	; 0
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
	u8 obj1,obj2,obj3;
	u8 obj1_R,obj2_R,obj3_R;
	CLCD_voidInit();
    2156:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <CLCD_voidInit>
	/*Input*/
	DIO_voidSetPinDirection(DIO_PORTA , DIO_PIN0 , DIO_INPUT );
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	60 e0       	ldi	r22, 0x00	; 0
    215e:	40 e0       	ldi	r20, 0x00	; 0
    2160:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidSetPinDirection>
	/*Pull UP*/
	DIO_voidSetPinValue(DIO_PORTA , DIO_PIN0 , DIO_HIGH);
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	60 e0       	ldi	r22, 0x00	; 0
    2168:	41 e0       	ldi	r20, 0x01	; 1
    216a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_voidSetPinValue>

	u8 Local_u8Pressed = 0 ;
    216e:	fe 01       	movw	r30, r28
    2170:	ef 57       	subi	r30, 0x7F	; 127
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	10 82       	st	Z, r1
	CLCD_voidSetPosition(CLCD_ROW_1 , CLCD_COL_3);
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	63 e0       	ldi	r22, 0x03	; 3
    217a:	0e 94 0d 10 	call	0x201a	; 0x201a <CLCD_voidSetPosition>
	CLCD_voidSendString((u8*)"...WELCOME...");
    217e:	80 e6       	ldi	r24, 0x60	; 96
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	0e 94 75 10 	call	0x20ea	; 0x20ea <CLCD_voidSendString>
    2186:	fe 01       	movw	r30, r28
    2188:	e5 58       	subi	r30, 0x85	; 133
    218a:	ff 4f       	sbci	r31, 0xFF	; 255
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	aa ef       	ldi	r26, 0xFA	; 250
    2192:	b3 e4       	ldi	r27, 0x43	; 67
    2194:	80 83       	st	Z, r24
    2196:	91 83       	std	Z+1, r25	; 0x01
    2198:	a2 83       	std	Z+2, r26	; 0x02
    219a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219c:	8e 01       	movw	r16, r28
    219e:	09 58       	subi	r16, 0x89	; 137
    21a0:	1f 4f       	sbci	r17, 0xFF	; 255
    21a2:	fe 01       	movw	r30, r28
    21a4:	e5 58       	subi	r30, 0x85	; 133
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	60 81       	ld	r22, Z
    21aa:	71 81       	ldd	r23, Z+1	; 0x01
    21ac:	82 81       	ldd	r24, Z+2	; 0x02
    21ae:	93 81       	ldd	r25, Z+3	; 0x03
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	4a ef       	ldi	r20, 0xFA	; 250
    21b6:	54 e4       	ldi	r21, 0x44	; 68
    21b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	f8 01       	movw	r30, r16
    21c2:	80 83       	st	Z, r24
    21c4:	91 83       	std	Z+1, r25	; 0x01
    21c6:	a2 83       	std	Z+2, r26	; 0x02
    21c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21ca:	fe 01       	movw	r30, r28
    21cc:	e9 58       	subi	r30, 0x89	; 137
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	60 81       	ld	r22, Z
    21d2:	71 81       	ldd	r23, Z+1	; 0x01
    21d4:	82 81       	ldd	r24, Z+2	; 0x02
    21d6:	93 81       	ldd	r25, Z+3	; 0x03
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e8       	ldi	r20, 0x80	; 128
    21de:	5f e3       	ldi	r21, 0x3F	; 63
    21e0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21e4:	88 23       	and	r24, r24
    21e6:	44 f4       	brge	.+16     	; 0x21f8 <main+0xbc>
		__ticks = 1;
    21e8:	fe 01       	movw	r30, r28
    21ea:	eb 58       	subi	r30, 0x8B	; 139
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	91 83       	std	Z+1, r25	; 0x01
    21f4:	80 83       	st	Z, r24
    21f6:	64 c0       	rjmp	.+200    	; 0x22c0 <main+0x184>
	else if (__tmp > 65535)
    21f8:	fe 01       	movw	r30, r28
    21fa:	e9 58       	subi	r30, 0x89	; 137
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	60 81       	ld	r22, Z
    2200:	71 81       	ldd	r23, Z+1	; 0x01
    2202:	82 81       	ldd	r24, Z+2	; 0x02
    2204:	93 81       	ldd	r25, Z+3	; 0x03
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	3f ef       	ldi	r19, 0xFF	; 255
    220a:	4f e7       	ldi	r20, 0x7F	; 127
    220c:	57 e4       	ldi	r21, 0x47	; 71
    220e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2212:	18 16       	cp	r1, r24
    2214:	0c f0       	brlt	.+2      	; 0x2218 <main+0xdc>
    2216:	43 c0       	rjmp	.+134    	; 0x229e <main+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2218:	fe 01       	movw	r30, r28
    221a:	e5 58       	subi	r30, 0x85	; 133
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	60 81       	ld	r22, Z
    2220:	71 81       	ldd	r23, Z+1	; 0x01
    2222:	82 81       	ldd	r24, Z+2	; 0x02
    2224:	93 81       	ldd	r25, Z+3	; 0x03
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e2       	ldi	r20, 0x20	; 32
    222c:	51 e4       	ldi	r21, 0x41	; 65
    222e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	8e 01       	movw	r16, r28
    2238:	0b 58       	subi	r16, 0x8B	; 139
    223a:	1f 4f       	sbci	r17, 0xFF	; 255
    223c:	bc 01       	movw	r22, r24
    223e:	cd 01       	movw	r24, r26
    2240:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	f8 01       	movw	r30, r16
    224a:	91 83       	std	Z+1, r25	; 0x01
    224c:	80 83       	st	Z, r24
    224e:	1f c0       	rjmp	.+62     	; 0x228e <main+0x152>
    2250:	fe 01       	movw	r30, r28
    2252:	ed 58       	subi	r30, 0x8D	; 141
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	88 ec       	ldi	r24, 0xC8	; 200
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	91 83       	std	Z+1, r25	; 0x01
    225c:	80 83       	st	Z, r24
    225e:	fe 01       	movw	r30, r28
    2260:	ed 58       	subi	r30, 0x8D	; 141
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	80 81       	ld	r24, Z
    2266:	91 81       	ldd	r25, Z+1	; 0x01
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	f1 f7       	brne	.-4      	; 0x2268 <main+0x12c>
    226c:	fe 01       	movw	r30, r28
    226e:	ed 58       	subi	r30, 0x8D	; 141
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	91 83       	std	Z+1, r25	; 0x01
    2274:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2276:	de 01       	movw	r26, r28
    2278:	ab 58       	subi	r26, 0x8B	; 139
    227a:	bf 4f       	sbci	r27, 0xFF	; 255
    227c:	fe 01       	movw	r30, r28
    227e:	eb 58       	subi	r30, 0x8B	; 139
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	80 81       	ld	r24, Z
    2284:	91 81       	ldd	r25, Z+1	; 0x01
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	11 96       	adiw	r26, 0x01	; 1
    228a:	9c 93       	st	X, r25
    228c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228e:	fe 01       	movw	r30, r28
    2290:	eb 58       	subi	r30, 0x8B	; 139
    2292:	ff 4f       	sbci	r31, 0xFF	; 255
    2294:	80 81       	ld	r24, Z
    2296:	91 81       	ldd	r25, Z+1	; 0x01
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	d1 f6       	brne	.-76     	; 0x2250 <main+0x114>
    229c:	28 c0       	rjmp	.+80     	; 0x22ee <main+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229e:	8e 01       	movw	r16, r28
    22a0:	0b 58       	subi	r16, 0x8B	; 139
    22a2:	1f 4f       	sbci	r17, 0xFF	; 255
    22a4:	fe 01       	movw	r30, r28
    22a6:	e9 58       	subi	r30, 0x89	; 137
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	60 81       	ld	r22, Z
    22ac:	71 81       	ldd	r23, Z+1	; 0x01
    22ae:	82 81       	ldd	r24, Z+2	; 0x02
    22b0:	93 81       	ldd	r25, Z+3	; 0x03
    22b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	f8 01       	movw	r30, r16
    22bc:	91 83       	std	Z+1, r25	; 0x01
    22be:	80 83       	st	Z, r24
    22c0:	de 01       	movw	r26, r28
    22c2:	af 58       	subi	r26, 0x8F	; 143
    22c4:	bf 4f       	sbci	r27, 0xFF	; 255
    22c6:	fe 01       	movw	r30, r28
    22c8:	eb 58       	subi	r30, 0x8B	; 139
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	80 81       	ld	r24, Z
    22ce:	91 81       	ldd	r25, Z+1	; 0x01
    22d0:	11 96       	adiw	r26, 0x01	; 1
    22d2:	9c 93       	st	X, r25
    22d4:	8e 93       	st	-X, r24
    22d6:	fe 01       	movw	r30, r28
    22d8:	ef 58       	subi	r30, 0x8F	; 143
    22da:	ff 4f       	sbci	r31, 0xFF	; 255
    22dc:	80 81       	ld	r24, Z
    22de:	91 81       	ldd	r25, Z+1	; 0x01
    22e0:	01 97       	sbiw	r24, 0x01	; 1
    22e2:	f1 f7       	brne	.-4      	; 0x22e0 <main+0x1a4>
    22e4:	fe 01       	movw	r30, r28
    22e6:	ef 58       	subi	r30, 0x8F	; 143
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	91 83       	std	Z+1, r25	; 0x01
    22ec:	80 83       	st	Z, r24
	_delay_ms(500);
	for(u8 k = 1 ; k < 16 ; k++){
    22ee:	fe 01       	movw	r30, r28
    22f0:	e0 58       	subi	r30, 0x80	; 128
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	80 83       	st	Z, r24
    22f8:	7d c1       	rjmp	.+762    	; 0x25f4 <main+0x4b8>
		CLCD_voidSetPosition(CLCD_ROW_1 ,k);
    22fa:	fe 01       	movw	r30, r28
    22fc:	e0 58       	subi	r30, 0x80	; 128
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	60 81       	ld	r22, Z
    2304:	0e 94 0d 10 	call	0x201a	; 0x201a <CLCD_voidSetPosition>
		CLCD_voidSendString((u8*)"...Mark Ayman...");
    2308:	8e e6       	ldi	r24, 0x6E	; 110
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	0e 94 75 10 	call	0x20ea	; 0x20ea <CLCD_voidSendString>
    2310:	fe 01       	movw	r30, r28
    2312:	e3 59       	subi	r30, 0x93	; 147
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	aa e7       	ldi	r26, 0x7A	; 122
    231c:	b3 e4       	ldi	r27, 0x43	; 67
    231e:	80 83       	st	Z, r24
    2320:	91 83       	std	Z+1, r25	; 0x01
    2322:	a2 83       	std	Z+2, r26	; 0x02
    2324:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2326:	8e 01       	movw	r16, r28
    2328:	07 59       	subi	r16, 0x97	; 151
    232a:	1f 4f       	sbci	r17, 0xFF	; 255
    232c:	fe 01       	movw	r30, r28
    232e:	e3 59       	subi	r30, 0x93	; 147
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	60 81       	ld	r22, Z
    2334:	71 81       	ldd	r23, Z+1	; 0x01
    2336:	82 81       	ldd	r24, Z+2	; 0x02
    2338:	93 81       	ldd	r25, Z+3	; 0x03
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	4a ef       	ldi	r20, 0xFA	; 250
    2340:	54 e4       	ldi	r21, 0x44	; 68
    2342:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	f8 01       	movw	r30, r16
    234c:	80 83       	st	Z, r24
    234e:	91 83       	std	Z+1, r25	; 0x01
    2350:	a2 83       	std	Z+2, r26	; 0x02
    2352:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2354:	fe 01       	movw	r30, r28
    2356:	e7 59       	subi	r30, 0x97	; 151
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	60 81       	ld	r22, Z
    235c:	71 81       	ldd	r23, Z+1	; 0x01
    235e:	82 81       	ldd	r24, Z+2	; 0x02
    2360:	93 81       	ldd	r25, Z+3	; 0x03
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	40 e8       	ldi	r20, 0x80	; 128
    2368:	5f e3       	ldi	r21, 0x3F	; 63
    236a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    236e:	88 23       	and	r24, r24
    2370:	44 f4       	brge	.+16     	; 0x2382 <main+0x246>
		__ticks = 1;
    2372:	fe 01       	movw	r30, r28
    2374:	e9 59       	subi	r30, 0x99	; 153
    2376:	ff 4f       	sbci	r31, 0xFF	; 255
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	91 83       	std	Z+1, r25	; 0x01
    237e:	80 83       	st	Z, r24
    2380:	64 c0       	rjmp	.+200    	; 0x244a <main+0x30e>
	else if (__tmp > 65535)
    2382:	fe 01       	movw	r30, r28
    2384:	e7 59       	subi	r30, 0x97	; 151
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	60 81       	ld	r22, Z
    238a:	71 81       	ldd	r23, Z+1	; 0x01
    238c:	82 81       	ldd	r24, Z+2	; 0x02
    238e:	93 81       	ldd	r25, Z+3	; 0x03
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	3f ef       	ldi	r19, 0xFF	; 255
    2394:	4f e7       	ldi	r20, 0x7F	; 127
    2396:	57 e4       	ldi	r21, 0x47	; 71
    2398:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    239c:	18 16       	cp	r1, r24
    239e:	0c f0       	brlt	.+2      	; 0x23a2 <main+0x266>
    23a0:	43 c0       	rjmp	.+134    	; 0x2428 <main+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a2:	fe 01       	movw	r30, r28
    23a4:	e3 59       	subi	r30, 0x93	; 147
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	60 81       	ld	r22, Z
    23aa:	71 81       	ldd	r23, Z+1	; 0x01
    23ac:	82 81       	ldd	r24, Z+2	; 0x02
    23ae:	93 81       	ldd	r25, Z+3	; 0x03
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	40 e2       	ldi	r20, 0x20	; 32
    23b6:	51 e4       	ldi	r21, 0x41	; 65
    23b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	8e 01       	movw	r16, r28
    23c2:	09 59       	subi	r16, 0x99	; 153
    23c4:	1f 4f       	sbci	r17, 0xFF	; 255
    23c6:	bc 01       	movw	r22, r24
    23c8:	cd 01       	movw	r24, r26
    23ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	f8 01       	movw	r30, r16
    23d4:	91 83       	std	Z+1, r25	; 0x01
    23d6:	80 83       	st	Z, r24
    23d8:	1f c0       	rjmp	.+62     	; 0x2418 <main+0x2dc>
    23da:	fe 01       	movw	r30, r28
    23dc:	eb 59       	subi	r30, 0x9B	; 155
    23de:	ff 4f       	sbci	r31, 0xFF	; 255
    23e0:	88 ec       	ldi	r24, 0xC8	; 200
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	91 83       	std	Z+1, r25	; 0x01
    23e6:	80 83       	st	Z, r24
    23e8:	fe 01       	movw	r30, r28
    23ea:	eb 59       	subi	r30, 0x9B	; 155
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	80 81       	ld	r24, Z
    23f0:	91 81       	ldd	r25, Z+1	; 0x01
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	f1 f7       	brne	.-4      	; 0x23f2 <main+0x2b6>
    23f6:	fe 01       	movw	r30, r28
    23f8:	eb 59       	subi	r30, 0x9B	; 155
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	91 83       	std	Z+1, r25	; 0x01
    23fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2400:	de 01       	movw	r26, r28
    2402:	a9 59       	subi	r26, 0x99	; 153
    2404:	bf 4f       	sbci	r27, 0xFF	; 255
    2406:	fe 01       	movw	r30, r28
    2408:	e9 59       	subi	r30, 0x99	; 153
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	80 81       	ld	r24, Z
    240e:	91 81       	ldd	r25, Z+1	; 0x01
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	11 96       	adiw	r26, 0x01	; 1
    2414:	9c 93       	st	X, r25
    2416:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2418:	fe 01       	movw	r30, r28
    241a:	e9 59       	subi	r30, 0x99	; 153
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	80 81       	ld	r24, Z
    2420:	91 81       	ldd	r25, Z+1	; 0x01
    2422:	00 97       	sbiw	r24, 0x00	; 0
    2424:	d1 f6       	brne	.-76     	; 0x23da <main+0x29e>
    2426:	27 c0       	rjmp	.+78     	; 0x2476 <main+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2428:	8e 01       	movw	r16, r28
    242a:	09 59       	subi	r16, 0x99	; 153
    242c:	1f 4f       	sbci	r17, 0xFF	; 255
    242e:	fe 01       	movw	r30, r28
    2430:	e7 59       	subi	r30, 0x97	; 151
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	60 81       	ld	r22, Z
    2436:	71 81       	ldd	r23, Z+1	; 0x01
    2438:	82 81       	ldd	r24, Z+2	; 0x02
    243a:	93 81       	ldd	r25, Z+3	; 0x03
    243c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	f8 01       	movw	r30, r16
    2446:	91 83       	std	Z+1, r25	; 0x01
    2448:	80 83       	st	Z, r24
    244a:	de 01       	movw	r26, r28
    244c:	ad 59       	subi	r26, 0x9D	; 157
    244e:	bf 4f       	sbci	r27, 0xFF	; 255
    2450:	fe 01       	movw	r30, r28
    2452:	e9 59       	subi	r30, 0x99	; 153
    2454:	ff 4f       	sbci	r31, 0xFF	; 255
    2456:	80 81       	ld	r24, Z
    2458:	91 81       	ldd	r25, Z+1	; 0x01
    245a:	8d 93       	st	X+, r24
    245c:	9c 93       	st	X, r25
    245e:	fe 01       	movw	r30, r28
    2460:	ed 59       	subi	r30, 0x9D	; 157
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	80 81       	ld	r24, Z
    2466:	91 81       	ldd	r25, Z+1	; 0x01
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	f1 f7       	brne	.-4      	; 0x2468 <main+0x32c>
    246c:	fe 01       	movw	r30, r28
    246e:	ed 59       	subi	r30, 0x9D	; 157
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	91 83       	std	Z+1, r25	; 0x01
    2474:	80 83       	st	Z, r24
		_delay_ms(250);
		CLCD_voidSendCommand(CLCD_CLEAR_DISPLAY);
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <CLCD_voidSendCommand>
    247c:	fe 01       	movw	r30, r28
    247e:	e1 5a       	subi	r30, 0xA1	; 161
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	aa e7       	ldi	r26, 0x7A	; 122
    2488:	b3 e4       	ldi	r27, 0x43	; 67
    248a:	80 83       	st	Z, r24
    248c:	91 83       	std	Z+1, r25	; 0x01
    248e:	a2 83       	std	Z+2, r26	; 0x02
    2490:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2492:	8e 01       	movw	r16, r28
    2494:	05 5a       	subi	r16, 0xA5	; 165
    2496:	1f 4f       	sbci	r17, 0xFF	; 255
    2498:	fe 01       	movw	r30, r28
    249a:	e1 5a       	subi	r30, 0xA1	; 161
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	60 81       	ld	r22, Z
    24a0:	71 81       	ldd	r23, Z+1	; 0x01
    24a2:	82 81       	ldd	r24, Z+2	; 0x02
    24a4:	93 81       	ldd	r25, Z+3	; 0x03
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	4a ef       	ldi	r20, 0xFA	; 250
    24ac:	54 e4       	ldi	r21, 0x44	; 68
    24ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	f8 01       	movw	r30, r16
    24b8:	80 83       	st	Z, r24
    24ba:	91 83       	std	Z+1, r25	; 0x01
    24bc:	a2 83       	std	Z+2, r26	; 0x02
    24be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24c0:	fe 01       	movw	r30, r28
    24c2:	e5 5a       	subi	r30, 0xA5	; 165
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	60 81       	ld	r22, Z
    24c8:	71 81       	ldd	r23, Z+1	; 0x01
    24ca:	82 81       	ldd	r24, Z+2	; 0x02
    24cc:	93 81       	ldd	r25, Z+3	; 0x03
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	40 e8       	ldi	r20, 0x80	; 128
    24d4:	5f e3       	ldi	r21, 0x3F	; 63
    24d6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24da:	88 23       	and	r24, r24
    24dc:	44 f4       	brge	.+16     	; 0x24ee <main+0x3b2>
		__ticks = 1;
    24de:	fe 01       	movw	r30, r28
    24e0:	e7 5a       	subi	r30, 0xA7	; 167
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	91 83       	std	Z+1, r25	; 0x01
    24ea:	80 83       	st	Z, r24
    24ec:	64 c0       	rjmp	.+200    	; 0x25b6 <main+0x47a>
	else if (__tmp > 65535)
    24ee:	fe 01       	movw	r30, r28
    24f0:	e5 5a       	subi	r30, 0xA5	; 165
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	60 81       	ld	r22, Z
    24f6:	71 81       	ldd	r23, Z+1	; 0x01
    24f8:	82 81       	ldd	r24, Z+2	; 0x02
    24fa:	93 81       	ldd	r25, Z+3	; 0x03
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	3f ef       	ldi	r19, 0xFF	; 255
    2500:	4f e7       	ldi	r20, 0x7F	; 127
    2502:	57 e4       	ldi	r21, 0x47	; 71
    2504:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2508:	18 16       	cp	r1, r24
    250a:	0c f0       	brlt	.+2      	; 0x250e <main+0x3d2>
    250c:	43 c0       	rjmp	.+134    	; 0x2594 <main+0x458>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    250e:	fe 01       	movw	r30, r28
    2510:	e1 5a       	subi	r30, 0xA1	; 161
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	60 81       	ld	r22, Z
    2516:	71 81       	ldd	r23, Z+1	; 0x01
    2518:	82 81       	ldd	r24, Z+2	; 0x02
    251a:	93 81       	ldd	r25, Z+3	; 0x03
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e2       	ldi	r20, 0x20	; 32
    2522:	51 e4       	ldi	r21, 0x41	; 65
    2524:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	8e 01       	movw	r16, r28
    252e:	07 5a       	subi	r16, 0xA7	; 167
    2530:	1f 4f       	sbci	r17, 0xFF	; 255
    2532:	bc 01       	movw	r22, r24
    2534:	cd 01       	movw	r24, r26
    2536:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	f8 01       	movw	r30, r16
    2540:	91 83       	std	Z+1, r25	; 0x01
    2542:	80 83       	st	Z, r24
    2544:	1f c0       	rjmp	.+62     	; 0x2584 <main+0x448>
    2546:	fe 01       	movw	r30, r28
    2548:	e9 5a       	subi	r30, 0xA9	; 169
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	88 ec       	ldi	r24, 0xC8	; 200
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	91 83       	std	Z+1, r25	; 0x01
    2552:	80 83       	st	Z, r24
    2554:	fe 01       	movw	r30, r28
    2556:	e9 5a       	subi	r30, 0xA9	; 169
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	80 81       	ld	r24, Z
    255c:	91 81       	ldd	r25, Z+1	; 0x01
    255e:	01 97       	sbiw	r24, 0x01	; 1
    2560:	f1 f7       	brne	.-4      	; 0x255e <main+0x422>
    2562:	fe 01       	movw	r30, r28
    2564:	e9 5a       	subi	r30, 0xA9	; 169
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	91 83       	std	Z+1, r25	; 0x01
    256a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256c:	de 01       	movw	r26, r28
    256e:	a7 5a       	subi	r26, 0xA7	; 167
    2570:	bf 4f       	sbci	r27, 0xFF	; 255
    2572:	fe 01       	movw	r30, r28
    2574:	e7 5a       	subi	r30, 0xA7	; 167
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	80 81       	ld	r24, Z
    257a:	91 81       	ldd	r25, Z+1	; 0x01
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	11 96       	adiw	r26, 0x01	; 1
    2580:	9c 93       	st	X, r25
    2582:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2584:	fe 01       	movw	r30, r28
    2586:	e7 5a       	subi	r30, 0xA7	; 167
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	80 81       	ld	r24, Z
    258c:	91 81       	ldd	r25, Z+1	; 0x01
    258e:	00 97       	sbiw	r24, 0x00	; 0
    2590:	d1 f6       	brne	.-76     	; 0x2546 <main+0x40a>
    2592:	27 c0       	rjmp	.+78     	; 0x25e2 <main+0x4a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2594:	8e 01       	movw	r16, r28
    2596:	07 5a       	subi	r16, 0xA7	; 167
    2598:	1f 4f       	sbci	r17, 0xFF	; 255
    259a:	fe 01       	movw	r30, r28
    259c:	e5 5a       	subi	r30, 0xA5	; 165
    259e:	ff 4f       	sbci	r31, 0xFF	; 255
    25a0:	60 81       	ld	r22, Z
    25a2:	71 81       	ldd	r23, Z+1	; 0x01
    25a4:	82 81       	ldd	r24, Z+2	; 0x02
    25a6:	93 81       	ldd	r25, Z+3	; 0x03
    25a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	f8 01       	movw	r30, r16
    25b2:	91 83       	std	Z+1, r25	; 0x01
    25b4:	80 83       	st	Z, r24
    25b6:	de 01       	movw	r26, r28
    25b8:	ab 5a       	subi	r26, 0xAB	; 171
    25ba:	bf 4f       	sbci	r27, 0xFF	; 255
    25bc:	fe 01       	movw	r30, r28
    25be:	e7 5a       	subi	r30, 0xA7	; 167
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	80 81       	ld	r24, Z
    25c4:	91 81       	ldd	r25, Z+1	; 0x01
    25c6:	8d 93       	st	X+, r24
    25c8:	9c 93       	st	X, r25
    25ca:	fe 01       	movw	r30, r28
    25cc:	eb 5a       	subi	r30, 0xAB	; 171
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	80 81       	ld	r24, Z
    25d2:	91 81       	ldd	r25, Z+1	; 0x01
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	f1 f7       	brne	.-4      	; 0x25d4 <main+0x498>
    25d8:	fe 01       	movw	r30, r28
    25da:	eb 5a       	subi	r30, 0xAB	; 171
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	91 83       	std	Z+1, r25	; 0x01
    25e0:	80 83       	st	Z, r24

	u8 Local_u8Pressed = 0 ;
	CLCD_voidSetPosition(CLCD_ROW_1 , CLCD_COL_3);
	CLCD_voidSendString((u8*)"...WELCOME...");
	_delay_ms(500);
	for(u8 k = 1 ; k < 16 ; k++){
    25e2:	de 01       	movw	r26, r28
    25e4:	a0 58       	subi	r26, 0x80	; 128
    25e6:	bf 4f       	sbci	r27, 0xFF	; 255
    25e8:	fe 01       	movw	r30, r28
    25ea:	e0 58       	subi	r30, 0x80	; 128
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	80 81       	ld	r24, Z
    25f0:	8f 5f       	subi	r24, 0xFF	; 255
    25f2:	8c 93       	st	X, r24
    25f4:	fe 01       	movw	r30, r28
    25f6:	e0 58       	subi	r30, 0x80	; 128
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	80 81       	ld	r24, Z
    25fc:	80 31       	cpi	r24, 0x10	; 16
    25fe:	08 f4       	brcc	.+2      	; 0x2602 <main+0x4c6>
    2600:	7c ce       	rjmp	.-776    	; 0x22fa <main+0x1be>
    2602:	fe 01       	movw	r30, r28
    2604:	ef 5a       	subi	r30, 0xAF	; 175
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	aa e7       	ldi	r26, 0x7A	; 122
    260e:	b4 e4       	ldi	r27, 0x44	; 68
    2610:	80 83       	st	Z, r24
    2612:	91 83       	std	Z+1, r25	; 0x01
    2614:	a2 83       	std	Z+2, r26	; 0x02
    2616:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2618:	8e 01       	movw	r16, r28
    261a:	03 5b       	subi	r16, 0xB3	; 179
    261c:	1f 4f       	sbci	r17, 0xFF	; 255
    261e:	fe 01       	movw	r30, r28
    2620:	ef 5a       	subi	r30, 0xAF	; 175
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	60 81       	ld	r22, Z
    2626:	71 81       	ldd	r23, Z+1	; 0x01
    2628:	82 81       	ldd	r24, Z+2	; 0x02
    262a:	93 81       	ldd	r25, Z+3	; 0x03
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	4a ef       	ldi	r20, 0xFA	; 250
    2632:	54 e4       	ldi	r21, 0x44	; 68
    2634:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	f8 01       	movw	r30, r16
    263e:	80 83       	st	Z, r24
    2640:	91 83       	std	Z+1, r25	; 0x01
    2642:	a2 83       	std	Z+2, r26	; 0x02
    2644:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2646:	fe 01       	movw	r30, r28
    2648:	e3 5b       	subi	r30, 0xB3	; 179
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	60 81       	ld	r22, Z
    264e:	71 81       	ldd	r23, Z+1	; 0x01
    2650:	82 81       	ldd	r24, Z+2	; 0x02
    2652:	93 81       	ldd	r25, Z+3	; 0x03
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	40 e8       	ldi	r20, 0x80	; 128
    265a:	5f e3       	ldi	r21, 0x3F	; 63
    265c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2660:	88 23       	and	r24, r24
    2662:	44 f4       	brge	.+16     	; 0x2674 <main+0x538>
		__ticks = 1;
    2664:	fe 01       	movw	r30, r28
    2666:	e5 5b       	subi	r30, 0xB5	; 181
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	91 83       	std	Z+1, r25	; 0x01
    2670:	80 83       	st	Z, r24
    2672:	64 c0       	rjmp	.+200    	; 0x273c <main+0x600>
	else if (__tmp > 65535)
    2674:	fe 01       	movw	r30, r28
    2676:	e3 5b       	subi	r30, 0xB3	; 179
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	60 81       	ld	r22, Z
    267c:	71 81       	ldd	r23, Z+1	; 0x01
    267e:	82 81       	ldd	r24, Z+2	; 0x02
    2680:	93 81       	ldd	r25, Z+3	; 0x03
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	3f ef       	ldi	r19, 0xFF	; 255
    2686:	4f e7       	ldi	r20, 0x7F	; 127
    2688:	57 e4       	ldi	r21, 0x47	; 71
    268a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    268e:	18 16       	cp	r1, r24
    2690:	0c f0       	brlt	.+2      	; 0x2694 <main+0x558>
    2692:	43 c0       	rjmp	.+134    	; 0x271a <main+0x5de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2694:	fe 01       	movw	r30, r28
    2696:	ef 5a       	subi	r30, 0xAF	; 175
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	60 81       	ld	r22, Z
    269c:	71 81       	ldd	r23, Z+1	; 0x01
    269e:	82 81       	ldd	r24, Z+2	; 0x02
    26a0:	93 81       	ldd	r25, Z+3	; 0x03
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e2       	ldi	r20, 0x20	; 32
    26a8:	51 e4       	ldi	r21, 0x41	; 65
    26aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	8e 01       	movw	r16, r28
    26b4:	05 5b       	subi	r16, 0xB5	; 181
    26b6:	1f 4f       	sbci	r17, 0xFF	; 255
    26b8:	bc 01       	movw	r22, r24
    26ba:	cd 01       	movw	r24, r26
    26bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	f8 01       	movw	r30, r16
    26c6:	91 83       	std	Z+1, r25	; 0x01
    26c8:	80 83       	st	Z, r24
    26ca:	1f c0       	rjmp	.+62     	; 0x270a <main+0x5ce>
    26cc:	fe 01       	movw	r30, r28
    26ce:	e7 5b       	subi	r30, 0xB7	; 183
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	88 ec       	ldi	r24, 0xC8	; 200
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	91 83       	std	Z+1, r25	; 0x01
    26d8:	80 83       	st	Z, r24
    26da:	fe 01       	movw	r30, r28
    26dc:	e7 5b       	subi	r30, 0xB7	; 183
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	80 81       	ld	r24, Z
    26e2:	91 81       	ldd	r25, Z+1	; 0x01
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	f1 f7       	brne	.-4      	; 0x26e4 <main+0x5a8>
    26e8:	fe 01       	movw	r30, r28
    26ea:	e7 5b       	subi	r30, 0xB7	; 183
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	91 83       	std	Z+1, r25	; 0x01
    26f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f2:	de 01       	movw	r26, r28
    26f4:	a5 5b       	subi	r26, 0xB5	; 181
    26f6:	bf 4f       	sbci	r27, 0xFF	; 255
    26f8:	fe 01       	movw	r30, r28
    26fa:	e5 5b       	subi	r30, 0xB5	; 181
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	80 81       	ld	r24, Z
    2700:	91 81       	ldd	r25, Z+1	; 0x01
    2702:	01 97       	sbiw	r24, 0x01	; 1
    2704:	11 96       	adiw	r26, 0x01	; 1
    2706:	9c 93       	st	X, r25
    2708:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270a:	fe 01       	movw	r30, r28
    270c:	e5 5b       	subi	r30, 0xB5	; 181
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	80 81       	ld	r24, Z
    2712:	91 81       	ldd	r25, Z+1	; 0x01
    2714:	00 97       	sbiw	r24, 0x00	; 0
    2716:	d1 f6       	brne	.-76     	; 0x26cc <main+0x590>
    2718:	28 c0       	rjmp	.+80     	; 0x276a <main+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271a:	8e 01       	movw	r16, r28
    271c:	05 5b       	subi	r16, 0xB5	; 181
    271e:	1f 4f       	sbci	r17, 0xFF	; 255
    2720:	fe 01       	movw	r30, r28
    2722:	e3 5b       	subi	r30, 0xB3	; 179
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	60 81       	ld	r22, Z
    2728:	71 81       	ldd	r23, Z+1	; 0x01
    272a:	82 81       	ldd	r24, Z+2	; 0x02
    272c:	93 81       	ldd	r25, Z+3	; 0x03
    272e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	f8 01       	movw	r30, r16
    2738:	91 83       	std	Z+1, r25	; 0x01
    273a:	80 83       	st	Z, r24
    273c:	de 01       	movw	r26, r28
    273e:	a9 5b       	subi	r26, 0xB9	; 185
    2740:	bf 4f       	sbci	r27, 0xFF	; 255
    2742:	fe 01       	movw	r30, r28
    2744:	e5 5b       	subi	r30, 0xB5	; 181
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	80 81       	ld	r24, Z
    274a:	91 81       	ldd	r25, Z+1	; 0x01
    274c:	11 96       	adiw	r26, 0x01	; 1
    274e:	9c 93       	st	X, r25
    2750:	8e 93       	st	-X, r24
    2752:	fe 01       	movw	r30, r28
    2754:	e9 5b       	subi	r30, 0xB9	; 185
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	80 81       	ld	r24, Z
    275a:	91 81       	ldd	r25, Z+1	; 0x01
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	f1 f7       	brne	.-4      	; 0x275c <main+0x620>
    2760:	fe 01       	movw	r30, r28
    2762:	e9 5b       	subi	r30, 0xB9	; 185
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	91 83       	std	Z+1, r25	; 0x01
    2768:	80 83       	st	Z, r24
	}

	_delay_ms(1000);
	while(1)
	{
		for(u8 i = 1 ; i < 16 ; i++)
    276a:	fe 01       	movw	r30, r28
    276c:	e1 58       	subi	r30, 0x81	; 129
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	80 83       	st	Z, r24
    2774:	ee c2       	rjmp	.+1500   	; 0x2d52 <main+0xc16>
		{

				CLCD_voidSendExtraChar(0 , Array_1 , obj1_R=CLCD_ROW_2 , obj1=i);
    2776:	fe 01       	movw	r30, r28
    2778:	ec 57       	subi	r30, 0x7C	; 124
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	80 83       	st	Z, r24
    2780:	de 01       	movw	r26, r28
    2782:	a9 57       	subi	r26, 0x79	; 121
    2784:	bf 4f       	sbci	r27, 0xFF	; 255
    2786:	fe 01       	movw	r30, r28
    2788:	e1 58       	subi	r30, 0x81	; 129
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	80 81       	ld	r24, Z
    278e:	8c 93       	st	X, r24
    2790:	27 e8       	ldi	r18, 0x87	; 135
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	fe 01       	movw	r30, r28
    2796:	ec 57       	subi	r30, 0x7C	; 124
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	de 01       	movw	r26, r28
    279c:	a9 57       	subi	r26, 0x79	; 121
    279e:	bf 4f       	sbci	r27, 0xFF	; 255
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	b9 01       	movw	r22, r18
    27a4:	40 81       	ld	r20, Z
    27a6:	2c 91       	ld	r18, X
    27a8:	0e 94 34 10 	call	0x2068	; 0x2068 <CLCD_voidSendExtraChar>
				CLCD_voidSendExtraChar(1 , Array_2 , CLCD_ROW_1 , (16-i));
    27ac:	fe 01       	movw	r30, r28
    27ae:	e1 58       	subi	r30, 0x81	; 129
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	90 e1       	ldi	r25, 0x10	; 16
    27b4:	80 81       	ld	r24, Z
    27b6:	98 1b       	sub	r25, r24
    27b8:	2f e8       	ldi	r18, 0x8F	; 143
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	b9 01       	movw	r22, r18
    27c0:	40 e0       	ldi	r20, 0x00	; 0
    27c2:	29 2f       	mov	r18, r25
    27c4:	0e 94 34 10 	call	0x2068	; 0x2068 <CLCD_voidSendExtraChar>
    27c8:	fe 01       	movw	r30, r28
    27ca:	ed 5b       	subi	r30, 0xBD	; 189
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	aa e7       	ldi	r26, 0x7A	; 122
    27d4:	b3 e4       	ldi	r27, 0x43	; 67
    27d6:	80 83       	st	Z, r24
    27d8:	91 83       	std	Z+1, r25	; 0x01
    27da:	a2 83       	std	Z+2, r26	; 0x02
    27dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27de:	8e 01       	movw	r16, r28
    27e0:	01 5c       	subi	r16, 0xC1	; 193
    27e2:	1f 4f       	sbci	r17, 0xFF	; 255
    27e4:	fe 01       	movw	r30, r28
    27e6:	ed 5b       	subi	r30, 0xBD	; 189
    27e8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ea:	60 81       	ld	r22, Z
    27ec:	71 81       	ldd	r23, Z+1	; 0x01
    27ee:	82 81       	ldd	r24, Z+2	; 0x02
    27f0:	93 81       	ldd	r25, Z+3	; 0x03
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	4a ef       	ldi	r20, 0xFA	; 250
    27f8:	54 e4       	ldi	r21, 0x44	; 68
    27fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	f8 01       	movw	r30, r16
    2804:	80 83       	st	Z, r24
    2806:	91 83       	std	Z+1, r25	; 0x01
    2808:	a2 83       	std	Z+2, r26	; 0x02
    280a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    280c:	fe 01       	movw	r30, r28
    280e:	ff 96       	adiw	r30, 0x3f	; 63
    2810:	60 81       	ld	r22, Z
    2812:	71 81       	ldd	r23, Z+1	; 0x01
    2814:	82 81       	ldd	r24, Z+2	; 0x02
    2816:	93 81       	ldd	r25, Z+3	; 0x03
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e8       	ldi	r20, 0x80	; 128
    281e:	5f e3       	ldi	r21, 0x3F	; 63
    2820:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2824:	88 23       	and	r24, r24
    2826:	2c f4       	brge	.+10     	; 0x2832 <main+0x6f6>
		__ticks = 1;
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	9e af       	std	Y+62, r25	; 0x3e
    282e:	8d af       	std	Y+61, r24	; 0x3d
    2830:	46 c0       	rjmp	.+140    	; 0x28be <main+0x782>
	else if (__tmp > 65535)
    2832:	fe 01       	movw	r30, r28
    2834:	ff 96       	adiw	r30, 0x3f	; 63
    2836:	60 81       	ld	r22, Z
    2838:	71 81       	ldd	r23, Z+1	; 0x01
    283a:	82 81       	ldd	r24, Z+2	; 0x02
    283c:	93 81       	ldd	r25, Z+3	; 0x03
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	3f ef       	ldi	r19, 0xFF	; 255
    2842:	4f e7       	ldi	r20, 0x7F	; 127
    2844:	57 e4       	ldi	r21, 0x47	; 71
    2846:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    284a:	18 16       	cp	r1, r24
    284c:	64 f5       	brge	.+88     	; 0x28a6 <main+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284e:	fe 01       	movw	r30, r28
    2850:	ed 5b       	subi	r30, 0xBD	; 189
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	60 81       	ld	r22, Z
    2856:	71 81       	ldd	r23, Z+1	; 0x01
    2858:	82 81       	ldd	r24, Z+2	; 0x02
    285a:	93 81       	ldd	r25, Z+3	; 0x03
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e2       	ldi	r20, 0x20	; 32
    2862:	51 e4       	ldi	r21, 0x41	; 65
    2864:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	bc 01       	movw	r22, r24
    286e:	cd 01       	movw	r24, r26
    2870:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	9e af       	std	Y+62, r25	; 0x3e
    287a:	8d af       	std	Y+61, r24	; 0x3d
    287c:	0f c0       	rjmp	.+30     	; 0x289c <main+0x760>
    287e:	88 ec       	ldi	r24, 0xC8	; 200
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	9c af       	std	Y+60, r25	; 0x3c
    2884:	8b af       	std	Y+59, r24	; 0x3b
    2886:	8b ad       	ldd	r24, Y+59	; 0x3b
    2888:	9c ad       	ldd	r25, Y+60	; 0x3c
    288a:	01 97       	sbiw	r24, 0x01	; 1
    288c:	f1 f7       	brne	.-4      	; 0x288a <main+0x74e>
    288e:	9c af       	std	Y+60, r25	; 0x3c
    2890:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2892:	8d ad       	ldd	r24, Y+61	; 0x3d
    2894:	9e ad       	ldd	r25, Y+62	; 0x3e
    2896:	01 97       	sbiw	r24, 0x01	; 1
    2898:	9e af       	std	Y+62, r25	; 0x3e
    289a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289c:	8d ad       	ldd	r24, Y+61	; 0x3d
    289e:	9e ad       	ldd	r25, Y+62	; 0x3e
    28a0:	00 97       	sbiw	r24, 0x00	; 0
    28a2:	69 f7       	brne	.-38     	; 0x287e <main+0x742>
    28a4:	16 c0       	rjmp	.+44     	; 0x28d2 <main+0x796>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a6:	fe 01       	movw	r30, r28
    28a8:	ff 96       	adiw	r30, 0x3f	; 63
    28aa:	60 81       	ld	r22, Z
    28ac:	71 81       	ldd	r23, Z+1	; 0x01
    28ae:	82 81       	ldd	r24, Z+2	; 0x02
    28b0:	93 81       	ldd	r25, Z+3	; 0x03
    28b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	9e af       	std	Y+62, r25	; 0x3e
    28bc:	8d af       	std	Y+61, r24	; 0x3d
    28be:	8d ad       	ldd	r24, Y+61	; 0x3d
    28c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    28c2:	9a af       	std	Y+58, r25	; 0x3a
    28c4:	89 af       	std	Y+57, r24	; 0x39
    28c6:	89 ad       	ldd	r24, Y+57	; 0x39
    28c8:	9a ad       	ldd	r25, Y+58	; 0x3a
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	f1 f7       	brne	.-4      	; 0x28ca <main+0x78e>
    28ce:	9a af       	std	Y+58, r25	; 0x3a
    28d0:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(250);
				CLCD_voidSendExtraChar(2 , Array_3 , obj3_R=CLCD_ROW_2 ,obj3=(16-2*i));
    28d2:	fe 01       	movw	r30, r28
    28d4:	ee 57       	subi	r30, 0x7E	; 126
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	80 83       	st	Z, r24
    28dc:	fe 01       	movw	r30, r28
    28de:	e1 58       	subi	r30, 0x81	; 129
    28e0:	ff 4f       	sbci	r31, 0xFF	; 255
    28e2:	80 81       	ld	r24, Z
    28e4:	28 2f       	mov	r18, r24
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	88 e0       	ldi	r24, 0x08	; 8
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	82 1b       	sub	r24, r18
    28ee:	93 0b       	sbc	r25, r19
    28f0:	88 0f       	add	r24, r24
    28f2:	99 1f       	adc	r25, r25
    28f4:	fe 01       	movw	r30, r28
    28f6:	eb 57       	subi	r30, 0x7B	; 123
    28f8:	ff 4f       	sbci	r31, 0xFF	; 255
    28fa:	80 83       	st	Z, r24
    28fc:	27 e9       	ldi	r18, 0x97	; 151
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	fe 01       	movw	r30, r28
    2902:	ee 57       	subi	r30, 0x7E	; 126
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	de 01       	movw	r26, r28
    2908:	ab 57       	subi	r26, 0x7B	; 123
    290a:	bf 4f       	sbci	r27, 0xFF	; 255
    290c:	82 e0       	ldi	r24, 0x02	; 2
    290e:	b9 01       	movw	r22, r18
    2910:	40 81       	ld	r20, Z
    2912:	2c 91       	ld	r18, X
    2914:	0e 94 34 10 	call	0x2068	; 0x2068 <CLCD_voidSendExtraChar>
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	aa e7       	ldi	r26, 0x7A	; 122
    291e:	b3 e4       	ldi	r27, 0x43	; 67
    2920:	8d ab       	std	Y+53, r24	; 0x35
    2922:	9e ab       	std	Y+54, r25	; 0x36
    2924:	af ab       	std	Y+55, r26	; 0x37
    2926:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2928:	6d a9       	ldd	r22, Y+53	; 0x35
    292a:	7e a9       	ldd	r23, Y+54	; 0x36
    292c:	8f a9       	ldd	r24, Y+55	; 0x37
    292e:	98 ad       	ldd	r25, Y+56	; 0x38
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	4a ef       	ldi	r20, 0xFA	; 250
    2936:	54 e4       	ldi	r21, 0x44	; 68
    2938:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	89 ab       	std	Y+49, r24	; 0x31
    2942:	9a ab       	std	Y+50, r25	; 0x32
    2944:	ab ab       	std	Y+51, r26	; 0x33
    2946:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2948:	69 a9       	ldd	r22, Y+49	; 0x31
    294a:	7a a9       	ldd	r23, Y+50	; 0x32
    294c:	8b a9       	ldd	r24, Y+51	; 0x33
    294e:	9c a9       	ldd	r25, Y+52	; 0x34
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	40 e8       	ldi	r20, 0x80	; 128
    2956:	5f e3       	ldi	r21, 0x3F	; 63
    2958:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    295c:	88 23       	and	r24, r24
    295e:	2c f4       	brge	.+10     	; 0x296a <main+0x82e>
		__ticks = 1;
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	98 ab       	std	Y+48, r25	; 0x30
    2966:	8f a7       	std	Y+47, r24	; 0x2f
    2968:	3f c0       	rjmp	.+126    	; 0x29e8 <main+0x8ac>
	else if (__tmp > 65535)
    296a:	69 a9       	ldd	r22, Y+49	; 0x31
    296c:	7a a9       	ldd	r23, Y+50	; 0x32
    296e:	8b a9       	ldd	r24, Y+51	; 0x33
    2970:	9c a9       	ldd	r25, Y+52	; 0x34
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	3f ef       	ldi	r19, 0xFF	; 255
    2976:	4f e7       	ldi	r20, 0x7F	; 127
    2978:	57 e4       	ldi	r21, 0x47	; 71
    297a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    297e:	18 16       	cp	r1, r24
    2980:	4c f5       	brge	.+82     	; 0x29d4 <main+0x898>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2982:	6d a9       	ldd	r22, Y+53	; 0x35
    2984:	7e a9       	ldd	r23, Y+54	; 0x36
    2986:	8f a9       	ldd	r24, Y+55	; 0x37
    2988:	98 ad       	ldd	r25, Y+56	; 0x38
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	40 e2       	ldi	r20, 0x20	; 32
    2990:	51 e4       	ldi	r21, 0x41	; 65
    2992:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	bc 01       	movw	r22, r24
    299c:	cd 01       	movw	r24, r26
    299e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	98 ab       	std	Y+48, r25	; 0x30
    29a8:	8f a7       	std	Y+47, r24	; 0x2f
    29aa:	0f c0       	rjmp	.+30     	; 0x29ca <main+0x88e>
    29ac:	88 ec       	ldi	r24, 0xC8	; 200
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	9e a7       	std	Y+46, r25	; 0x2e
    29b2:	8d a7       	std	Y+45, r24	; 0x2d
    29b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    29b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	f1 f7       	brne	.-4      	; 0x29b8 <main+0x87c>
    29bc:	9e a7       	std	Y+46, r25	; 0x2e
    29be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    29c2:	98 a9       	ldd	r25, Y+48	; 0x30
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	98 ab       	std	Y+48, r25	; 0x30
    29c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    29cc:	98 a9       	ldd	r25, Y+48	; 0x30
    29ce:	00 97       	sbiw	r24, 0x00	; 0
    29d0:	69 f7       	brne	.-38     	; 0x29ac <main+0x870>
    29d2:	14 c0       	rjmp	.+40     	; 0x29fc <main+0x8c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d4:	69 a9       	ldd	r22, Y+49	; 0x31
    29d6:	7a a9       	ldd	r23, Y+50	; 0x32
    29d8:	8b a9       	ldd	r24, Y+51	; 0x33
    29da:	9c a9       	ldd	r25, Y+52	; 0x34
    29dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	98 ab       	std	Y+48, r25	; 0x30
    29e6:	8f a7       	std	Y+47, r24	; 0x2f
    29e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ea:	98 a9       	ldd	r25, Y+48	; 0x30
    29ec:	9c a7       	std	Y+44, r25	; 0x2c
    29ee:	8b a7       	std	Y+43, r24	; 0x2b
    29f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    29f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    29f4:	01 97       	sbiw	r24, 0x01	; 1
    29f6:	f1 f7       	brne	.-4      	; 0x29f4 <main+0x8b8>
    29f8:	9c a7       	std	Y+44, r25	; 0x2c
    29fa:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(250);
				CLCD_voidSendCommand(CLCD_CLEAR_DISPLAY);
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <CLCD_voidSendCommand>
				if(((obj3-1)==obj1)/*&&(obj3_R==obj1_R)*/){
    2a02:	fe 01       	movw	r30, r28
    2a04:	eb 57       	subi	r30, 0x7B	; 123
    2a06:	ff 4f       	sbci	r31, 0xFF	; 255
    2a08:	80 81       	ld	r24, Z
    2a0a:	88 2f       	mov	r24, r24
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	9c 01       	movw	r18, r24
    2a10:	21 50       	subi	r18, 0x01	; 1
    2a12:	30 40       	sbci	r19, 0x00	; 0
    2a14:	fe 01       	movw	r30, r28
    2a16:	e9 57       	subi	r30, 0x79	; 121
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	80 81       	ld	r24, Z
    2a1c:	88 2f       	mov	r24, r24
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	28 17       	cp	r18, r24
    2a22:	39 07       	cpc	r19, r25
    2a24:	09 f0       	breq	.+2      	; 0x2a28 <main+0x8ec>
    2a26:	83 c0       	rjmp	.+262    	; 0x2b2e <main+0x9f2>
					CLCD_voidSendExtraChar(4 , Array_4 , obj1_R , obj1);
    2a28:	2f e9       	ldi	r18, 0x9F	; 159
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	ec 57       	subi	r30, 0x7C	; 124
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	de 01       	movw	r26, r28
    2a34:	a9 57       	subi	r26, 0x79	; 121
    2a36:	bf 4f       	sbci	r27, 0xFF	; 255
    2a38:	84 e0       	ldi	r24, 0x04	; 4
    2a3a:	b9 01       	movw	r22, r18
    2a3c:	40 81       	ld	r20, Z
    2a3e:	2c 91       	ld	r18, X
    2a40:	0e 94 34 10 	call	0x2068	; 0x2068 <CLCD_voidSendExtraChar>
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	aa e7       	ldi	r26, 0x7A	; 122
    2a4a:	b3 e4       	ldi	r27, 0x43	; 67
    2a4c:	8f a3       	std	Y+39, r24	; 0x27
    2a4e:	98 a7       	std	Y+40, r25	; 0x28
    2a50:	a9 a7       	std	Y+41, r26	; 0x29
    2a52:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a54:	6f a1       	ldd	r22, Y+39	; 0x27
    2a56:	78 a5       	ldd	r23, Y+40	; 0x28
    2a58:	89 a5       	ldd	r24, Y+41	; 0x29
    2a5a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	4a ef       	ldi	r20, 0xFA	; 250
    2a62:	54 e4       	ldi	r21, 0x44	; 68
    2a64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a68:	dc 01       	movw	r26, r24
    2a6a:	cb 01       	movw	r24, r22
    2a6c:	8b a3       	std	Y+35, r24	; 0x23
    2a6e:	9c a3       	std	Y+36, r25	; 0x24
    2a70:	ad a3       	std	Y+37, r26	; 0x25
    2a72:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a74:	6b a1       	ldd	r22, Y+35	; 0x23
    2a76:	7c a1       	ldd	r23, Y+36	; 0x24
    2a78:	8d a1       	ldd	r24, Y+37	; 0x25
    2a7a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	40 e8       	ldi	r20, 0x80	; 128
    2a82:	5f e3       	ldi	r21, 0x3F	; 63
    2a84:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a88:	88 23       	and	r24, r24
    2a8a:	2c f4       	brge	.+10     	; 0x2a96 <main+0x95a>
		__ticks = 1;
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	9a a3       	std	Y+34, r25	; 0x22
    2a92:	89 a3       	std	Y+33, r24	; 0x21
    2a94:	3f c0       	rjmp	.+126    	; 0x2b14 <main+0x9d8>
	else if (__tmp > 65535)
    2a96:	6b a1       	ldd	r22, Y+35	; 0x23
    2a98:	7c a1       	ldd	r23, Y+36	; 0x24
    2a9a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a9c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	3f ef       	ldi	r19, 0xFF	; 255
    2aa2:	4f e7       	ldi	r20, 0x7F	; 127
    2aa4:	57 e4       	ldi	r21, 0x47	; 71
    2aa6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2aaa:	18 16       	cp	r1, r24
    2aac:	4c f5       	brge	.+82     	; 0x2b00 <main+0x9c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aae:	6f a1       	ldd	r22, Y+39	; 0x27
    2ab0:	78 a5       	ldd	r23, Y+40	; 0x28
    2ab2:	89 a5       	ldd	r24, Y+41	; 0x29
    2ab4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 e2       	ldi	r20, 0x20	; 32
    2abc:	51 e4       	ldi	r21, 0x41	; 65
    2abe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	bc 01       	movw	r22, r24
    2ac8:	cd 01       	movw	r24, r26
    2aca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	9a a3       	std	Y+34, r25	; 0x22
    2ad4:	89 a3       	std	Y+33, r24	; 0x21
    2ad6:	0f c0       	rjmp	.+30     	; 0x2af6 <main+0x9ba>
    2ad8:	88 ec       	ldi	r24, 0xC8	; 200
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	98 a3       	std	Y+32, r25	; 0x20
    2ade:	8f 8f       	std	Y+31, r24	; 0x1f
    2ae0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ae2:	98 a1       	ldd	r25, Y+32	; 0x20
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	f1 f7       	brne	.-4      	; 0x2ae4 <main+0x9a8>
    2ae8:	98 a3       	std	Y+32, r25	; 0x20
    2aea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aec:	89 a1       	ldd	r24, Y+33	; 0x21
    2aee:	9a a1       	ldd	r25, Y+34	; 0x22
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	9a a3       	std	Y+34, r25	; 0x22
    2af4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af6:	89 a1       	ldd	r24, Y+33	; 0x21
    2af8:	9a a1       	ldd	r25, Y+34	; 0x22
    2afa:	00 97       	sbiw	r24, 0x00	; 0
    2afc:	69 f7       	brne	.-38     	; 0x2ad8 <main+0x99c>
    2afe:	14 c0       	rjmp	.+40     	; 0x2b28 <main+0x9ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b00:	6b a1       	ldd	r22, Y+35	; 0x23
    2b02:	7c a1       	ldd	r23, Y+36	; 0x24
    2b04:	8d a1       	ldd	r24, Y+37	; 0x25
    2b06:	9e a1       	ldd	r25, Y+38	; 0x26
    2b08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	9a a3       	std	Y+34, r25	; 0x22
    2b12:	89 a3       	std	Y+33, r24	; 0x21
    2b14:	89 a1       	ldd	r24, Y+33	; 0x21
    2b16:	9a a1       	ldd	r25, Y+34	; 0x22
    2b18:	9e 8f       	std	Y+30, r25	; 0x1e
    2b1a:	8d 8f       	std	Y+29, r24	; 0x1d
    2b1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b20:	01 97       	sbiw	r24, 0x01	; 1
    2b22:	f1 f7       	brne	.-4      	; 0x2b20 <main+0x9e4>
    2b24:	9e 8f       	std	Y+30, r25	; 0x1e
    2b26:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(250);
					CLCD_voidSendCommand(CLCD_CLEAR_DISPLAY);
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <CLCD_voidSendCommand>

				}
				Local_u8Pressed = DIO_u8GetPinValue(DIO_PORTA , DIO_PIN0 );
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	60 e0       	ldi	r22, 0x00	; 0
    2b32:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_u8GetPinValue>
    2b36:	fe 01       	movw	r30, r28
    2b38:	ef 57       	subi	r30, 0x7F	; 127
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	80 83       	st	Z, r24
				if(Local_u8Pressed == 0 ){
    2b3e:	fe 01       	movw	r30, r28
    2b40:	ef 57       	subi	r30, 0x7F	; 127
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	80 81       	ld	r24, Z
    2b46:	88 23       	and	r24, r24
    2b48:	09 f0       	breq	.+2      	; 0x2b4c <main+0xa10>
    2b4a:	fa c0       	rjmp	.+500    	; 0x2d40 <main+0xc04>
					CLCD_voidSendExtraChar(0 , Array_1 , CLCD_ROW_1 , i);
    2b4c:	27 e8       	ldi	r18, 0x87	; 135
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	fe 01       	movw	r30, r28
    2b52:	e1 58       	subi	r30, 0x81	; 129
    2b54:	ff 4f       	sbci	r31, 0xFF	; 255
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	b9 01       	movw	r22, r18
    2b5a:	40 e0       	ldi	r20, 0x00	; 0
    2b5c:	20 81       	ld	r18, Z
    2b5e:	0e 94 34 10 	call	0x2068	; 0x2068 <CLCD_voidSendExtraChar>
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	aa ef       	ldi	r26, 0xFA	; 250
    2b68:	b3 e4       	ldi	r27, 0x43	; 67
    2b6a:	89 8f       	std	Y+25, r24	; 0x19
    2b6c:	9a 8f       	std	Y+26, r25	; 0x1a
    2b6e:	ab 8f       	std	Y+27, r26	; 0x1b
    2b70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b72:	69 8d       	ldd	r22, Y+25	; 0x19
    2b74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	4a ef       	ldi	r20, 0xFA	; 250
    2b80:	54 e4       	ldi	r21, 0x44	; 68
    2b82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	8d 8b       	std	Y+21, r24	; 0x15
    2b8c:	9e 8b       	std	Y+22, r25	; 0x16
    2b8e:	af 8b       	std	Y+23, r26	; 0x17
    2b90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b92:	6d 89       	ldd	r22, Y+21	; 0x15
    2b94:	7e 89       	ldd	r23, Y+22	; 0x16
    2b96:	8f 89       	ldd	r24, Y+23	; 0x17
    2b98:	98 8d       	ldd	r25, Y+24	; 0x18
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	40 e8       	ldi	r20, 0x80	; 128
    2ba0:	5f e3       	ldi	r21, 0x3F	; 63
    2ba2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2ba6:	88 23       	and	r24, r24
    2ba8:	2c f4       	brge	.+10     	; 0x2bb4 <main+0xa78>
		__ticks = 1;
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	9c 8b       	std	Y+20, r25	; 0x14
    2bb0:	8b 8b       	std	Y+19, r24	; 0x13
    2bb2:	3f c0       	rjmp	.+126    	; 0x2c32 <main+0xaf6>
	else if (__tmp > 65535)
    2bb4:	6d 89       	ldd	r22, Y+21	; 0x15
    2bb6:	7e 89       	ldd	r23, Y+22	; 0x16
    2bb8:	8f 89       	ldd	r24, Y+23	; 0x17
    2bba:	98 8d       	ldd	r25, Y+24	; 0x18
    2bbc:	20 e0       	ldi	r18, 0x00	; 0
    2bbe:	3f ef       	ldi	r19, 0xFF	; 255
    2bc0:	4f e7       	ldi	r20, 0x7F	; 127
    2bc2:	57 e4       	ldi	r21, 0x47	; 71
    2bc4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2bc8:	18 16       	cp	r1, r24
    2bca:	4c f5       	brge	.+82     	; 0x2c1e <main+0xae2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bcc:	69 8d       	ldd	r22, Y+25	; 0x19
    2bce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	40 e2       	ldi	r20, 0x20	; 32
    2bda:	51 e4       	ldi	r21, 0x41	; 65
    2bdc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	bc 01       	movw	r22, r24
    2be6:	cd 01       	movw	r24, r26
    2be8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	9c 8b       	std	Y+20, r25	; 0x14
    2bf2:	8b 8b       	std	Y+19, r24	; 0x13
    2bf4:	0f c0       	rjmp	.+30     	; 0x2c14 <main+0xad8>
    2bf6:	88 ec       	ldi	r24, 0xC8	; 200
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	9a 8b       	std	Y+18, r25	; 0x12
    2bfc:	89 8b       	std	Y+17, r24	; 0x11
    2bfe:	89 89       	ldd	r24, Y+17	; 0x11
    2c00:	9a 89       	ldd	r25, Y+18	; 0x12
    2c02:	01 97       	sbiw	r24, 0x01	; 1
    2c04:	f1 f7       	brne	.-4      	; 0x2c02 <main+0xac6>
    2c06:	9a 8b       	std	Y+18, r25	; 0x12
    2c08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
    2c10:	9c 8b       	std	Y+20, r25	; 0x14
    2c12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c14:	8b 89       	ldd	r24, Y+19	; 0x13
    2c16:	9c 89       	ldd	r25, Y+20	; 0x14
    2c18:	00 97       	sbiw	r24, 0x00	; 0
    2c1a:	69 f7       	brne	.-38     	; 0x2bf6 <main+0xaba>
    2c1c:	14 c0       	rjmp	.+40     	; 0x2c46 <main+0xb0a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c20:	7e 89       	ldd	r23, Y+22	; 0x16
    2c22:	8f 89       	ldd	r24, Y+23	; 0x17
    2c24:	98 8d       	ldd	r25, Y+24	; 0x18
    2c26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	9c 8b       	std	Y+20, r25	; 0x14
    2c30:	8b 8b       	std	Y+19, r24	; 0x13
    2c32:	8b 89       	ldd	r24, Y+19	; 0x13
    2c34:	9c 89       	ldd	r25, Y+20	; 0x14
    2c36:	98 8b       	std	Y+16, r25	; 0x10
    2c38:	8f 87       	std	Y+15, r24	; 0x0f
    2c3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c3c:	98 89       	ldd	r25, Y+16	; 0x10
    2c3e:	01 97       	sbiw	r24, 0x01	; 1
    2c40:	f1 f7       	brne	.-4      	; 0x2c3e <main+0xb02>
    2c42:	98 8b       	std	Y+16, r25	; 0x10
    2c44:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(500);
					CLCD_voidSendCommand(CLCD_CLEAR_DISPLAY);
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <CLCD_voidSendCommand>
    2c4c:	80 e0       	ldi	r24, 0x00	; 0
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	aa ef       	ldi	r26, 0xFA	; 250
    2c52:	b3 e4       	ldi	r27, 0x43	; 67
    2c54:	8b 87       	std	Y+11, r24	; 0x0b
    2c56:	9c 87       	std	Y+12, r25	; 0x0c
    2c58:	ad 87       	std	Y+13, r26	; 0x0d
    2c5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	4a ef       	ldi	r20, 0xFA	; 250
    2c6a:	54 e4       	ldi	r21, 0x44	; 68
    2c6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	8f 83       	std	Y+7, r24	; 0x07
    2c76:	98 87       	std	Y+8, r25	; 0x08
    2c78:	a9 87       	std	Y+9, r26	; 0x09
    2c7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7e:	78 85       	ldd	r23, Y+8	; 0x08
    2c80:	89 85       	ldd	r24, Y+9	; 0x09
    2c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	40 e8       	ldi	r20, 0x80	; 128
    2c8a:	5f e3       	ldi	r21, 0x3F	; 63
    2c8c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c90:	88 23       	and	r24, r24
    2c92:	2c f4       	brge	.+10     	; 0x2c9e <main+0xb62>
		__ticks = 1;
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	9e 83       	std	Y+6, r25	; 0x06
    2c9a:	8d 83       	std	Y+5, r24	; 0x05
    2c9c:	3f c0       	rjmp	.+126    	; 0x2d1c <main+0xbe0>
	else if (__tmp > 65535)
    2c9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca0:	78 85       	ldd	r23, Y+8	; 0x08
    2ca2:	89 85       	ldd	r24, Y+9	; 0x09
    2ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	3f ef       	ldi	r19, 0xFF	; 255
    2caa:	4f e7       	ldi	r20, 0x7F	; 127
    2cac:	57 e4       	ldi	r21, 0x47	; 71
    2cae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2cb2:	18 16       	cp	r1, r24
    2cb4:	4c f5       	brge	.+82     	; 0x2d08 <main+0xbcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	40 e2       	ldi	r20, 0x20	; 32
    2cc4:	51 e4       	ldi	r21, 0x41	; 65
    2cc6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	bc 01       	movw	r22, r24
    2cd0:	cd 01       	movw	r24, r26
    2cd2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	9e 83       	std	Y+6, r25	; 0x06
    2cdc:	8d 83       	std	Y+5, r24	; 0x05
    2cde:	0f c0       	rjmp	.+30     	; 0x2cfe <main+0xbc2>
    2ce0:	88 ec       	ldi	r24, 0xC8	; 200
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	9c 83       	std	Y+4, r25	; 0x04
    2ce6:	8b 83       	std	Y+3, r24	; 0x03
    2ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cea:	9c 81       	ldd	r25, Y+4	; 0x04
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	f1 f7       	brne	.-4      	; 0x2cec <main+0xbb0>
    2cf0:	9c 83       	std	Y+4, r25	; 0x04
    2cf2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf8:	01 97       	sbiw	r24, 0x01	; 1
    2cfa:	9e 83       	std	Y+6, r25	; 0x06
    2cfc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2d00:	9e 81       	ldd	r25, Y+6	; 0x06
    2d02:	00 97       	sbiw	r24, 0x00	; 0
    2d04:	69 f7       	brne	.-38     	; 0x2ce0 <main+0xba4>
    2d06:	14 c0       	rjmp	.+40     	; 0x2d30 <main+0xbf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d08:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0a:	78 85       	ldd	r23, Y+8	; 0x08
    2d0c:	89 85       	ldd	r24, Y+9	; 0x09
    2d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	9e 83       	std	Y+6, r25	; 0x06
    2d1a:	8d 83       	std	Y+5, r24	; 0x05
    2d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d20:	9a 83       	std	Y+2, r25	; 0x02
    2d22:	89 83       	std	Y+1, r24	; 0x01
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	9a 81       	ldd	r25, Y+2	; 0x02
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	f1 f7       	brne	.-4      	; 0x2d28 <main+0xbec>
    2d2c:	9a 83       	std	Y+2, r25	; 0x02
    2d2e:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(500);
					Local_u8Pressed = DIO_u8GetPinValue(DIO_PORTA , DIO_PIN0 );
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	60 e0       	ldi	r22, 0x00	; 0
    2d34:	0e 94 57 08 	call	0x10ae	; 0x10ae <DIO_u8GetPinValue>
    2d38:	fe 01       	movw	r30, r28
    2d3a:	ef 57       	subi	r30, 0x7F	; 127
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	80 83       	st	Z, r24
	}

	_delay_ms(1000);
	while(1)
	{
		for(u8 i = 1 ; i < 16 ; i++)
    2d40:	de 01       	movw	r26, r28
    2d42:	a1 58       	subi	r26, 0x81	; 129
    2d44:	bf 4f       	sbci	r27, 0xFF	; 255
    2d46:	fe 01       	movw	r30, r28
    2d48:	e1 58       	subi	r30, 0x81	; 129
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	80 81       	ld	r24, Z
    2d4e:	8f 5f       	subi	r24, 0xFF	; 255
    2d50:	8c 93       	st	X, r24
    2d52:	fe 01       	movw	r30, r28
    2d54:	e1 58       	subi	r30, 0x81	; 129
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	80 81       	ld	r24, Z
    2d5a:	80 31       	cpi	r24, 0x10	; 16
    2d5c:	08 f4       	brcc	.+2      	; 0x2d60 <main+0xc24>
    2d5e:	0b cd       	rjmp	.-1514   	; 0x2776 <main+0x63a>
    2d60:	04 cd       	rjmp	.-1528   	; 0x276a <main+0x62e>

00002d62 <__prologue_saves__>:
    2d62:	2f 92       	push	r2
    2d64:	3f 92       	push	r3
    2d66:	4f 92       	push	r4
    2d68:	5f 92       	push	r5
    2d6a:	6f 92       	push	r6
    2d6c:	7f 92       	push	r7
    2d6e:	8f 92       	push	r8
    2d70:	9f 92       	push	r9
    2d72:	af 92       	push	r10
    2d74:	bf 92       	push	r11
    2d76:	cf 92       	push	r12
    2d78:	df 92       	push	r13
    2d7a:	ef 92       	push	r14
    2d7c:	ff 92       	push	r15
    2d7e:	0f 93       	push	r16
    2d80:	1f 93       	push	r17
    2d82:	cf 93       	push	r28
    2d84:	df 93       	push	r29
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
    2d8a:	ca 1b       	sub	r28, r26
    2d8c:	db 0b       	sbc	r29, r27
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	f8 94       	cli
    2d92:	de bf       	out	0x3e, r29	; 62
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	cd bf       	out	0x3d, r28	; 61
    2d98:	09 94       	ijmp

00002d9a <__epilogue_restores__>:
    2d9a:	2a 88       	ldd	r2, Y+18	; 0x12
    2d9c:	39 88       	ldd	r3, Y+17	; 0x11
    2d9e:	48 88       	ldd	r4, Y+16	; 0x10
    2da0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2da2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2da4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2da6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2da8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2daa:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dac:	b9 84       	ldd	r11, Y+9	; 0x09
    2dae:	c8 84       	ldd	r12, Y+8	; 0x08
    2db0:	df 80       	ldd	r13, Y+7	; 0x07
    2db2:	ee 80       	ldd	r14, Y+6	; 0x06
    2db4:	fd 80       	ldd	r15, Y+5	; 0x05
    2db6:	0c 81       	ldd	r16, Y+4	; 0x04
    2db8:	1b 81       	ldd	r17, Y+3	; 0x03
    2dba:	aa 81       	ldd	r26, Y+2	; 0x02
    2dbc:	b9 81       	ldd	r27, Y+1	; 0x01
    2dbe:	ce 0f       	add	r28, r30
    2dc0:	d1 1d       	adc	r29, r1
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	f8 94       	cli
    2dc6:	de bf       	out	0x3e, r29	; 62
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	cd bf       	out	0x3d, r28	; 61
    2dcc:	ed 01       	movw	r28, r26
    2dce:	08 95       	ret

00002dd0 <_exit>:
    2dd0:	f8 94       	cli

00002dd2 <__stop_program>:
    2dd2:	ff cf       	rjmp	.-2      	; 0x2dd2 <__stop_program>
